 bces.h

@PURPOSE: Provide platform-specific support for concurrency

@MNEMONIC: Basic Concurrency Environment System-level utilities (bces)

@AUTHOR: David Laurance (dlauranc)

@SEE_ALSO: bdes

@DESCRIPTION: This package provides definitions and utilities that allow other
 'bce' packages to take advantage of platform-specific thread implementations.

/Hierarchical Synopsis
/---------------------
 The 'bces' package currently has 4 components having 2 levels of physical
 dependency.  The list below shows the hierarchical ordering of the components.
 The order of components within each level is not architecturally significant,
 just alphabetical.
..
  2. bces_atomictypes

  1. bces_atomicutil
     bces_platform
     bces_threadlocalvariable
..

/Component Synopsis
/------------------
: 'bces_atomictypes':
:      Provide wrappers for atomic operations.
:
: 'bces_atomicutil':
:      Provide platform-independent atomic operations.
:
: 'bces_platform':
:      Provide platform-dependent thread-related trait definitions.
:
: 'bces_threadlocalvariable':
:      Provide a macro to declare a thread-local variable.


/'bces_platform'
/- - - - - - - -
 Component 'bces_platform' defines a single canonical structure
 ('bces_Platform') that can be tested at compile time to determine the
 appropriate threading policy in the current compilation and execution
 environment.  Currently, 'bces_Platform' defines threading policies for
 Windows 32 and for POSIX threads.

 Clients of 'bces_platform' use template specialization to isolate code that
 contains calls specific to a given threading model.  A client class that needs
 to support multiple threading models will define its own "implementation"
 class that presents a common interface to all threading models.  This
 "implementation" class is defined as a template class, with the formal
 template parameter 'bces_Platform::threadPolicy':
..
    class my_Class {
        typedef my_ClassImpl<bces_Platform::ThreadPolicy>   Impl;
        // details omitted
           .
           .
           .
    };
..
 Where necessary, the implementation class can be "forward-declared" as:
..
    template <typename THREAD_POLICY> class my_ClassImpl;
..
 The implementation class is then specialized for each specific thread
 implementation.
..
    template <> class my_ClassImpl<bces_Platform::PosixThreads> {
        // POSIX-specific implementation
    };
..

/'bces_atomictypes'
/ - - - - - - - - -
 Component 'bces_atomictypes' provides convenient wrappers for atomic integers
 and pointers.  These atomic types are implemented so that simple arithmetic
 operations can be performed on them in a way that guarantees that the
 operations will be completed atomically (without interruption) in a
 multi-threaded environment.  These atomic operations are implemented to avoid
 the use of a mutex and the resulting context switch.

 'bces_atomictypes' also provides a "Spin Lock" facility that allows client
 code to wait actively for a resource to free, rather than blocking and
 allowing the operating system to do a context switch.

/'bces_atomicutil' and 'bces_atomicutilimpl'
/- - - - - - - - - - - - - - - - - - - - - -
 Components 'bces_atomicutil' and 'bces_atomicutilimpl', taken together,
 provide low-level support for atomic operations needed by component
 'bces_atomictypes'.  Package 'bces_atomicutilimpl' is specialized for the
 various supported BDE platforms; a platform-specific implementation is
 selected via template specialization based upon the template parameter
 '<bdes_Platform::CPU>'.
