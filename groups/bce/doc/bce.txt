 bce.txt

@PURPOSE: Provide concurrency services and objects.

@MNEMONIC: Basic Concurrency Environment (bce)

@AUTHOR: David Laurance (dlauranc)

@SEE_ALSO: bdema, bdef

@DESCRIPTION: The 'bce' ("Basic Concurrency Environment") package group
 provides services to support thread-safe programming in a way that is portable
 across multiple operating systems and thread implementations.  Several
 individual packages and components in this package group are designed to
 parallel (and augment) similar components in the 'bde' package group.

 Where 'bce' components have counterparts in 'bde', these thread-safe
 components are interoperable with their counterparts in 'bde', with the
 exception that 'bce' components can be used by client code in multiple
 threads.   For example, 'bcema' allocators function similarly to their 'bdema'
 counterparts, and can be used where 'bdema' allocators are required.

 Additional components in 'bce' extend the basic functionality in 'bde' to
 provide locking and synchronization mechanisms and thread pools.

/Hierarchical Synopsis
/---------------------
 The 'bce' package group currently has 13 packages having 8 levels of physical
 dependency.  The list below shows the hierarchical ordering of the packages.
 The order of packages within each level is not architecturally significant,
 just alphabetical.
..
  8. bcecs
     bcep

  7. bcec
     bcefu

  6. bcef
     bcefi

  5. bcefr
     bcem
     bcesb

  4. bcema

  3. bcemt

  2. bces

  1. bcescm
..

/Package Synopsis
/----------------
: 'bcec':
:      Provide containers that support concurrent (multi-thread) access.
:
: 'bcecs':
:      Provide thread-enabled, special-purpose containers.
:
: 'bcef':
:      Provide signature-specific function objects (functors).
:
: 'bcefi':
:      Provide concrete representations for void function objects.
:
: 'bcefr':
:      Provide a common reference-counted base class functor representation.
:
: 'bcefu':
:      Provide factory methods for populating void function objects.
:
: 'bcem':
:      Provide a single interface for messaging using the 'bdem' package.
:
: 'bcema':
:      Provide thread-safe allocators and pools.
:
: 'bcemt':
:      Support for multi-threading and thread-safe processes.
:
: 'bcep':
:      Provide support for dynamic thread pools
:
: 'bces':
:      Provide platform-specific support for concurrency
:
: 'bcesb':
:      Provide thread-enabled concrete 'streambuf' implementations.
:
: 'bcescm':
:      Provide versioning information for library components in 'bce'

/Package Overview
/----------------
 The following provides a brief overview of several of the packages within the
 'bce' package group, arranged in alphabetical order.  The descriptions here
 are still very brief; see the respective Package Level documents for more
 details and usage examples.

/'bcec'
/ - - -
 'bcec' provides a variety of containers that allow concurrent access and
 manipulation.  'bcec' is similar in *intent* to 'bdec', but with some
 significant interface differences to support blocking operations in the
 presence of multiple threads.

/'bcef'
/- - -
 'bcef' provides a thread-safe implementation of the "envelope" components for
 reference-counted function objects (functors) analogous to those in 'bdef'.
 The 'bcef' functors are the basic types commonly used as callbacks in other
 components that require thread safety.  See also {'bcefr'}, {'bcefi'}, and
 {'bcefu'}.

/'bcefi'
/- - - -
 This package is *DEPRECATED*.  'bcefi' provides the concrete implementations
 ("letters") of reference-counted function object (functor).  See also
 {'bcef'}, {'bcefr'}, and {'bcefu'}.

/'bcefr'
/- - - -
 This package is *DEPRECATED*.  'bcefr' provides the abstract
 (reference-counted) base classes for function object (functor) "letters".  See
 also {'bcef'}, {'bcefi'}, and {'bcefu'}.

/'bcefu'
/- - - -
 This package is *DEPRECATED*.  'bcefu' provides utility components for
 populating 'bcef' function objects (functors).  The 'bcefu' populator
 mechanism is the primary interface that clients will typically use to generate
 specific functors as needed, e.g., for callbacks in the signatures of other
 components.

/'bcem'
/- - - -
 {'bcemt'} provides an interface for messaging using components in the 'bdem'
 package.  In  particular 'bcem_aggregate' (and associated types) provide
 a general-purpose in-core document representation that can be used in
 conjunction with different of serialization mechanisms.  The supported
 serialization mechanisms are {'bdex'} and all {'bdeat'} compliant encoders
 and decoders (such as the BER encoders in 'bdem', {'baexml'}, or {'baejsn'}).

/'bcema'
/- - - -
 {'bcema'} provides thread-safe memory allocation and related proctor and
 handle objects.

/'bcemt'
/- - - -
 {'bcemt'} provides primitives that allow creation and management of threads,
 as well as synchronization between threads (e.g., mutex, condition variable).

/'bcep'
/- - -
 {'bcep'} provides a dynamic pool of threads, with an interface to schedule
 jobs and manage their execution by distributing them across the pool.

/'bces'
/- - -
 {'bces'} provides primitives to support atomic operations, that is, arithmetic
 operations that are guaranteed to execute sequentially in a multi-threaded
 environment.

/'bcesb'
/- - - -
 {'bcesb'} provides thread-enabled implementations of the 'std::streambuf'
 interface.  At present, only the input portion of a pooled-buffer-chain
 concrete 'streambuf' is provided.

/'bcescm'
/- - - -
 {'bcescm'} is a special source control management package containing a single
 component, 'bcescm_version'.  This component is included by every other
 component in 'bce', and provides versioning information for the package group.
 Users may use the 'bcescm_version' facilities to query a particular 'bce'
 library for its version information.
