// bslma_testallocatormonitor.h                                       -*-C++-*-
#ifndef INCLUDED_BSLMA_TESTALLOCATORMONITOR
#define INCLUDED_BSLMA_TESTALLOCATORMONITOR

#ifndef INCLUDED_BSLS_IDENT
#include <bsls_ident.h>
#endif
BSLS_IDENT("$Id: $")

//@PURPOSE: Provide a mechanism to summarize 'bslma_TestAllocator' object use.
//
//@CLASSES:
//  bslma_TestAllocatorMonitor: 'bslma_TestAllocator' summary mechanism
//
//@AUTHOR: Rohan Bhindwale (rbhindwale), Steven Breitstein (sbreitstein)
//
//@SEE_ALSO: bslma_testallocator
//
//@DESCRIPTION: This component provides a single mechanism class,
// 'bslma_TestAllocatorMonitor', which is used, in concert with
// 'bslma_TestAllocator', in the implementation of test drivers.  The
// 'bslma_TestAllocatorMonitor' class provides boolean accessors indicating
// whether associated test allocator state has changed (or not) since
// construction of the monitor.  Using 'bslma_TestAllocatorMonitor' objects
// often result in test cases that are more concise, easier to read, and less
// error prone than test cases that directly access the test allocator for
// state information.
//
///Statistics
///----------
// The test allocator statistics tracked by the test allocator monitor along
// with the boolean accessors used to observe a change in those statistics are
// shown in the table below.  The change (or lack of change) reported by these
// accessors are relative to the value of the test allocator statistic at the
// construction of the monitor.  Note that each of these statistics count
// blocks of memory (i.e., number of allocations from the allocator), and do
// not depend on the number of bytes in those allocated blocks.
//..
//  Statistic        Is-Same Method Is-Up Method Is-Down Method
//  --------------   -------------- ------------ --------------
//  numBlocksInUse   isInUseSame    isInUseUp    isInUseDown
//  numBlocksMax     isMaxSame      isMaxUp      none
//  numBlocksTotal   isTotalSame    isTotalUp    none
//..
// The 'numBlocksMax' and 'numBlocksTotal' statistics have values that are
// monotonically non-decreasing; hence, they need no "Is-Down" methods.  Note
// that if a monitor is created for an allocator with outstanding blocks ("in
// use"), then it is possible for the allocator's count of outstanding blocks
// to drop below the value seen by the monitor at construction.

#ifndef INCLUDED_BSLMA_TESTALLOCATOR
#include <bslma_testallocator.h>
#endif

namespace BloombergLP {

                        // ================================
                        // class bslma_TestAllocatorMonitor
                        // ================================

class bslma_TestAllocatorMonitor {
    // This mechanism provides a set of boolean accessor methods indicating
    // whether a change has occurred in the state of the 'bslma_TestAllocator'
    // object (supplied at construction) since the construction of the monitor.
    // See the Statistics section of @DESCRIPTION for the statics tracked.

    // DATA
    const bsls_Types::Int64          d_initialInUse;    // 'numBlocksInUse'
    const bsls_Types::Int64          d_initialMax;      // 'numBlocksMax'
    const bsls_Types::Int64          d_initialTotal;    // 'numBlocksTotal'
    const bslma_TestAllocator *const d_testAllocator_p; // held, not owned

    static const bslma_TestAllocator *
                           isNotNull(const bslma_TestAllocator *testAllocator);

  public:
    // CREATORS
    explicit bslma_TestAllocatorMonitor(
                                     const bslma_TestAllocator *testAllocator);
        // Create a 'bslma_TestAllocatorMonitor' object to track changes in
        // statistics of the specified 'testAllocator'.

#if defined(BSLS_ASSERT_SAFE_IS_ACTIVE)
    // The following destructor is generated by the compiler, except in "SAFE"
    // build modes (e.g., to enable the checking of class invariants).

    ~bslma_TestAllocatorMonitor();
        // Destroy this object.
#endif

    // ACCESSORS
    bool isInUseDown() const;
        // Return 'true' if the 'numBlocksInUse' statistic of the tracked test
        // allocator has decreased since construction of this monitor, and
        // 'false' otherwise.

    bool isInUseSame() const;
        // Return 'true' if the 'numBlocksInUse' statistic of the tracked test
        // allocator has not changed since construction of this monitor, and
        // 'false' otherwise.

    bool isInUseUp() const;
        // Return 'true' if the 'numBlocksInUse' statistic of the tracked test
        // allocator has increased since construction of this monitor, and
        // 'false' otherwise.

    bool isMaxSame() const;
        // Return 'true' if the 'numBlocksMax' statistic of the tracked test
        // allocator has not changed since construction of this monitor, and
        // 'false' otherwise.

    bool isMaxUp() const;
        // Return 'true' if the 'numBlocksMax' statistic of the tracked test
        // allocator has increased since construction of this monitor, and
        // 'false' otherwise.

    bool isTotalSame() const;
        // Return 'true' if the 'numBlocksTotal' statistic of the tracked test
        // allocator has not changed since construction of this monitor, and
        // 'false' otherwise.

    bool isTotalUp() const;
        // Return 'true' if the 'numBlocksTotal' statistic of the tracked test
        // allocator has increased since construction of this monitor, and
        // 'false' otherwise.
};

// ============================================================================
//                      INLINE FUNCTION DEFINITIONS
// ============================================================================

                        // --------------------------------
                        // class bslma_TestAllocatorMonitor
                        // --------------------------------

// CLASS METHODS
inline
const bslma_TestAllocator *
bslma_TestAllocatorMonitor::isNotNull(const bslma_TestAllocator *testAllocator)
{
    BSLS_ASSERT_SAFE(testAllocator);
    return testAllocator;
}

// CREATORS
inline
bslma_TestAllocatorMonitor::bslma_TestAllocatorMonitor(
                                      const bslma_TestAllocator *testAllocator)
: d_initialInUse((isNotNull(testAllocator))->numBlocksInUse())
, d_initialMax(testAllocator->numBlocksMax())
, d_initialTotal(testAllocator->numBlocksTotal())
, d_testAllocator_p(testAllocator)
{
}

#if defined(BSLS_ASSERT_SAFE_IS_ACTIVE)
inline
bslma_TestAllocatorMonitor::~bslma_TestAllocatorMonitor()
{
    BSLS_ASSERT_SAFE(d_testAllocator_p);
    BSLS_ASSERT_SAFE(0 <= d_initialMax);
    BSLS_ASSERT_SAFE(0 <= d_initialTotal);
}
#endif

// ACCESSORS
inline
bool bslma_TestAllocatorMonitor::isInUseDown() const
{
    return d_testAllocator_p->numBlocksInUse() < d_initialInUse;
}

inline
bool bslma_TestAllocatorMonitor::isInUseSame() const
{
    return d_testAllocator_p->numBlocksInUse() == d_initialInUse;
}

inline
bool bslma_TestAllocatorMonitor::isInUseUp() const
{
    return d_testAllocator_p->numBlocksInUse() > d_initialInUse;
}

inline
bool bslma_TestAllocatorMonitor::isMaxSame() const
{
    return d_initialMax == d_testAllocator_p->numBlocksMax();
}

inline
bool bslma_TestAllocatorMonitor::isMaxUp() const
{
    return d_testAllocator_p->numBlocksMax() != d_initialMax;
}

inline
bool bslma_TestAllocatorMonitor::isTotalSame() const
{
    return d_testAllocator_p->numBlocksTotal() == d_initialTotal;
}

inline
bool bslma_TestAllocatorMonitor::isTotalUp() const
{
    return d_testAllocator_p->numBlocksTotal() != d_initialTotal;
}

}  // close enterprise namespace

#endif

// ---------------------------------------------------------------------------
// NOTICE:
//      Copyright (C) Bloomberg L.P., 2011
//      All Rights Reserved.
//      Property of Bloomberg L.P.  (BLP)
//      This software is made available solely pursuant to the
//      terms of a BLP license agreement which governs its use.
// ----------------------------- END-OF-FILE ---------------------------------
