 bslmf.txt

@PURPOSE: Provide meta-function versions of useful coding constructs.

@MNEMONIC: Basic Standard Library Meta-Functions (bslmf)

@AUTHOR: Herve Bronnimann (hbronnim)

@DESCRIPTION: The 'bdemf' package provides meta-function equivalents of certain
 useful coding constructs.  A meta-function is a template-based, compile-time
 construct that behaves like a (runtime) function in that it "evaluates"
 arguments and does something different based on the input it is passed (in the
 case of templates, the input it is instantiated with).  'bslmf' provides
 metafunctions to evaluate (at compile time) constructs such as the following:
 an 'if'-statement equivalent, whether a (template) argument is a fundamental
 type, whether an argument is an 'enum' type, whether two arguments have the
 same type, and more.

 The "return value" of that function is generally a compile-time constant under
 the form of a nested 'enum' 'VALUE', or in some cases a nested 'Type', or
 both.  For instance, in order to evaluate whether two types are the same, one
 could write a meta-function predicate (evaluating to 0 or 1) as follows:
..
    template <class U, class V>
    struct IsSame {
        // This 'struct' provides a meta function parameterized by two types
        // 'U' and 'V', that takes 'VALUE == 0' unless 'U' and 'V' are the same
        // type, in which case it takes 'VALUE == 1'.

        // PUBLIC TYPES
        enum { VALUE = 0 };
        typedef bslmf_MetaInt<VALUE>  Type;
    };

    // SPECIALIZATIONS
    template <class T>
    struct IsSame<T, T> {
        // This specialization of the 'IsSame' meta function is parameterized
        // by a single type 'T' and is selected if the two parameters of
        // 'IsSame', 'U' and 'V', are both equal to 'T'.  It takes
        // 'VALUE == 1'.

        // PUBLIC TYPES
        enum { VALUE = 1 };
        typedef bslmf_MetaInt<VALUE>  Type;
    };
..
 Note the use of a 'bslmf_MetaInt' nested type usually employed for function
 dispatching.  See the 'bslmf_issame' component-level documentation for a more
 thorough usage example.

 Other meta-functions don't have a 'VALUE', but apply some type transformation
 (e.g., removing top-level 'const' qualifiers, decaying array and function
 types to pointer types).  Those usually have a nested 'Type'.

/Hierarchical Synopsis
/---------------------
 The 'bslmf' package currently has 26 components having 8 levels of physical
 dependency.  The table below shows the hierarchical ordering of the
 components.  The order of components within each level is not architecturally
 significant, just alphabetical.
..
  8. bslmf_enableif

  7. bslmf_forwardingtype
     bslmf_ispolymorphic

  6. bslmf_functionpointertraits
     bslmf_isclass
     bslmf_isenum
     bslmf_memberfunctionpointertraits

  5. bslmf_addreference
     bslmf_arraytopointer
     bslmf_if
     bslmf_isconvertible
     bslmf_removereference
     bslmf_switch
     bslmf_typelist

  4. bslmf_isarray
     bslmf_isfundamental
     bslmf_ispointer
     bslmf_ispointertomember
     bslmf_issame
     bslmf_isvoid
     bslmf_nil

  3. bslmf_metaint

  2. bslmf_tag

  1. bslmf_anytype
     bslmf_assert
     bslmf_removecvq
..

/Component Synopsis
/------------------
: 'bslmf_addreference':
:      Provide a meta-function for adding "reference-ness" to a type.
:
: 'bslmf_anytype':
:      Provide a generic type to which any type can be converted.
:
: 'bslmf_arraytopointer':
:      Provide a meta-function to convert array types to pointer types.
:
: 'bslmf_assert':
:      Provide a compile-time assertion facility.
:
: 'bslmf_enableif':
:      Provide a utility to set up SFINAE conditions in type deduction.
:
: 'bslmf_forwardingtype':
:      Provide a meta-function for determining an optimal forwarding type.
:
: 'bslmf_functionpointertraits':
:      Provide a meta-function for determining function pointer traits.
:
: 'bslmf_if':
:      Provide a compile-time 'if/else' (conditional) meta-function.
:
: 'bslmf_isarray':
:      Provide a compile-time check for array types.
:
: 'bslmf_isclass':
:      Provide a compile-time check for class types.
:
: 'bslmf_isconvertible':
:      Provide a compile-time type conversion checker.
:
: 'bslmf_isenum':
:      Provide compile-time detection of enumerated types.
:
: 'bslmf_isfundamental':
:      Provide a compile-time check for fundamental types.
:
: 'bslmf_ispointer':
:      Provide a compile-time check for pointer types.
:
: 'bslmf_ispointertomember':
:      Provide a compile-time check for pointer-to-member types.
:
: 'bslmf_ispolymorphic':
:      Provide a compile-time check for polymorphic types.
:
: 'bslmf_issame':
:      Provide an meta-function for checking if two types are the same.
:
: 'bslmf_isvoid':
:      Provide a compile-time check for 'void' types.
:
: 'bslmf_memberfunctionpointertraits':
:      Provide meta-functions to detect member function pointer traits.
:
: 'bslmf_metaint':
:      Provide a meta-function to map integral constants to unique types.
:
: 'bslmf_nil':
:      Provide a nil type.
:
: 'bslmf_removecvq':
:      Provide a meta-function for removing 'const'/'volatile' qualifiers.
:
: 'bslmf_removereference':
:      Provide a meta-function for removing reference-ness from types.
:
: 'bslmf_switch':
:      Provide a compile-time 'switch' meta-function.
:
: 'bslmf_tag':
:      Provide an integral-constant-to-type conversion.
:
: 'bslmf_typelist':
:      Provide a typelist component

