// bteso_lingeroptions.h                                              -*-C++-*-
#ifndef INCLUDED_BTESO_LINGEROPTIONS
#define INCLUDED_BTESO_LINGEROPTIONS

#ifndef INCLUDED_BDES_IDENT
#include <bdes_ident.h>
#endif
BDES_IDENT("$Id: $")

//@PURPOSE: Provide an attribute class to store linger options.
//
//@CLASSES:
//  bteso_LingerOptions: attributes storing socket linger options
//
//@AUTHOR: Rohan Bhindwale (rbhindwa)
//
//@SEE_ALSO: bteso_socketoptions
//
//@DESCRIPTION: This component provides a single, simply constrained
// (value-semantic) attribute class, 'bteso_LingerOptions', that is used
// to specify the linger options that can be set on a socket.  Linger options
// are options on a socket that has data queued to be sent but is being closed.
// Note that linger options cannot be set directly on a socket; instead, they
// must be used in conjunction with 'bteso_SocketOptions'.
//
///Attributes
///----------
//..
//  Name              Type         Default  Simple Constraints
//  ----------------  -----------  -------  ------------------
//  timeout           int          0        >= 0
//  useLingeringFlag  bool         false    none
//..
//: o timeout: maximum time (in seconds) that a process should be blocked when
//:   trying to 'close' a socket if there is untransmitted data.
//:
//: o useLingeringFlag: 'true' if the process should be blocked when trying to
//:   'close' a socket if there is untransmitted data.
//
///Usage
///-----
// In this section we show intended usage of this component.
//
///Example 1: Setting Linger Options
///- - - - - - - - - - - - - - - - -
// The following snippets of code illustrate how to set linger options:
//..
//  bteso_LingerOptions lingerOptions;
//
//  // Set the lingering option with a timeout of 2 seconds.
//  lingerOptions.setUseLingeringFlag(true);
//  lingerOptions.setTimeout(2);
//..
// We can then set these linger options on any socket handle using
// 'bteso_SocketOptions'.

#ifndef INCLUDED_BTESCM_VERSION
#include <btescm_version.h>
#endif

#ifndef INCLUDED_BDEX_INSTREAMFUNCTIONS
#include <bdex_instreamfunctions.h>
#endif

#ifndef INCLUDED_BDEX_OUTSTREAMFUNCTIONS
#include <bdex_outstreamfunctions.h>
#endif

#ifndef INCLUDED_BSLALG_TYPETRAITS
#include <bslalg_typetraits.h>
#endif

#ifndef INCLUDED_BSL_IOSFWD
#include <bsl_iosfwd.h>
#endif

namespace BloombergLP {

                       // =========================
                       // class bteso_LingerOptions
                       // =========================

class bteso_LingerOptions {
    // This simply constrained (value-semantic) attribute class stores linger
    // options values.  See the Attributes section under @DESCRIPTION in the
    // component-level documentation.  Note that the class invariants are
    // identically the constraints on the individual attributes.
    //
    // This class:
    //: o supports a complete set of *value-semantic* operations
    //: o is *exception-safe*
    //: o is *alias-safe*
    //: o is 'const' *thread-safe*
    // For terminology see 'bsldoc_glossary'.

    // DATA
    int   d_timeout;           // maximum time out value (in seconds) that a
                               // process should be blocked when trying to
                               // 'close' a socket if there is untransmitted
                               // data

    bool  d_useLingeringFlag;  // flag specifying if the process should be
                               // blocked when trying to 'close' a socket if
                               // there is untransmitted data

  public:
    // TRAITS
    BSLALG_DECLARE_NESTED_TRAITS(bteso_LingerOptions,
                                 bslalg_TypeTraitBitwiseMoveable);

    // CLASS METHODS
    static int maxSupportedBdexVersion();
        // Return the most current 'bdex' streaming version number supported by
        // this class.  See the 'bdex' package-level documentation for more
        // information on 'bdex' streaming of value-semantic types and
        // containers.

    // CREATORS
    bteso_LingerOptions();
        // Create a 'bteso_LingerOptions' object having the (default) attribute
        // values:
        //: o 'timeout()          == 0'
        //: o 'useLingeringFlag() == false'

    bteso_LingerOptions(int timeout, bool useLingeringFlag);
        // Create a 'bteso_LingerOptions' object having the specified
        // 'timeout', and 'useLingeringFlag' attribute values.  The behavior is
        // undefined unless '0 <= timeout'.

    bteso_LingerOptions(const bteso_LingerOptions& original);
        // Create a 'bteso_LingerOptions' object having the same value as the
        // specified 'original' object.

#if defined(BSLS_ASSERT_SAFE_IS_ACTIVE)
    // The following destructor is generated by the compiler, except in "SAFE"
    // build modes (e.g., to enable the checking of class invariants).

    ~bteso_LingerOptions();
        // Destroy this object.
#endif

    // MANIPULATORS
    bteso_LingerOptions& operator=(const bteso_LingerOptions& rhs);
        // Assign to this object the value of the specified 'rhs' object, and
        // return a reference providing modifiable access to this object.

    template <class STREAM>
    STREAM& bdexStreamIn(STREAM& stream, int version);
        // Assign to this object the value read from the specified input
        // 'stream' using the specified 'version' format and return a reference
        // to the modifiable 'stream'.  If 'stream' is initially invalid, this
        // operation has no effect.  If 'stream' becomes invalid during this
        // operation, this object is valid, but its value is undefined.  If
        // 'version' is not supported, 'stream' is marked invalid and this
        // object is unaltered.  Note that no version is read from 'stream'.
        // See the 'bdex' package-level documentation for more information on
        // 'bdex' streaming of value-semantic types and containers.

    void reset();
        // Reset this linger options object to the default value (i.e., its
        // value upon default construction).

    void setTimeout(int value);
        // Set the 'timeout' attribute of this object to the specified 'value'.
        // The behavior is undefined unless '0 <= value'.

    void setUseLingeringFlag(bool value);
        // Set the 'useLingeringFlag' attribute of this object to the specified
        // 'value'.

    // ACCESSORS
    bool useLingeringFlag() const;
        // Return the value of the 'useLingeringFlag' attribute of this object.

    int timeout() const;
        // Return the value of the 'timeout' attribute of this object.  Note
        // that this value is '>= 0'.

                                  // Aspects

    bsl::ostream& print(bsl::ostream& stream,
                        int           level = 0,
                        int           spacesPerLevel = 4) const;
        // Write the value of this object to the specified output 'stream' in
        // a human-readable format, and return a reference to 'stream'.
        // Optionally specify an initial indentation 'level', whose absolute
        // value is incremented recursively for nested objects.  If 'level' is
        // specified, optionally specify 'spacesPerLevel', whose absolute
        // value indicates the number of spaces per indentation level for this
        // and all of its nested objects.  If 'level' is negative, suppress
        // indentation of the first line.  If 'spacesPerLevel' is negative,
        // format the entire output on one line, suppressing all but the
        // initial indentation (as governed by 'level').  Note that the
        // format is not fully specified, and can change without notice.

    template <class STREAM>
    STREAM& bdexStreamOut(STREAM& stream, int version) const;
        // Write the value of this object to the specified output 'stream'
        // using the specified 'version' format and return a reference to the
        // modifiable 'stream'.  If 'version' is not supported, 'stream' is
        // unmodified.  Note that 'version' is not written to 'stream'.
        // See the 'bdex' package-level documentation for more information
        // on 'bdex' streaming of value-semantic types and containers.
};

// FREE OPERATORS
inline
bool operator==(const bteso_LingerOptions& lhs,
                const bteso_LingerOptions& rhs);
    // Return 'true' if the specified 'lhs' and 'rhs' objects have the same
    // value, and 'false' otherwise.  Two 'bteso_LingerOptions' objects have
    // the same value if the corresponding values of their 'timeout', and
    // 'useLingeringFlag' attributes are the same.

inline
bool operator!=(const bteso_LingerOptions& lhs,
                const bteso_LingerOptions& rhs);
    // Return 'true' if the specified 'lhs' and 'rhs' objects have the same
    // value, and 'false' otherwise.  Two 'bteso_LingerOptions' objects have
    // the same value if the corresponding values of their 'timeout', and
    // 'useLingeringFlag' attributes are not the same.

bsl::ostream& operator<<(bsl::ostream&              stream,
                         const bteso_LingerOptions& object);
    // Write the value of the specified 'object' to the specified
    // output 'stream' in a single-line format, and return a reference to
    // 'stream'.  If 'stream' is not valid on entry, this operation has no
    // effect.  Note that this human-readable format is not fully specified
    // and can change without notice.  Also note that this method has the same
    // behavior as 'object.print(stream, 0, -1)' with the attribute names
    // elided.

// ============================================================================
//                         INLINE FUNCTION DEFINITIONS
// ============================================================================

                       // -------------------------
                       // class bteso_LingerOptions
                       // -------------------------

// CLASS METHODS
inline
int bteso_LingerOptions::maxSupportedBdexVersion()
{
    return 1;  // versions start at 1.
}

// MANIPULATORS
inline 
bteso_LingerOptions& bteso_LingerOptions::operator=(
                                                const bteso_LingerOptions& rhs)
{
    if (this != &rhs) {
        d_useLingeringFlag = rhs.d_useLingeringFlag;
        d_timeout          = rhs.d_timeout;
    }
    return *this;
}

template <class STREAM>
STREAM& bteso_LingerOptions::bdexStreamIn(STREAM& stream, int version)
{
    if (stream) {
        switch (version) {
          case 1: {
            bool useLingeringFlag;
            int  timeout;

            bdex_InStreamFunctions::streamIn(stream, timeout, 1);
            bdex_InStreamFunctions::streamIn(stream, useLingeringFlag, 1);

            if (stream) {
                BSLS_ASSERT(0 <= timeout);

                d_useLingeringFlag = useLingeringFlag;
                d_timeout = timeout;
            }

          } break;
          default: {
            stream.invalidate();
          }
        }
    }
    return stream;
}

inline
void bteso_LingerOptions::setTimeout(int value)
{
    BSLS_ASSERT_SAFE(0 <= value)

    d_timeout = value;
}

inline
void bteso_LingerOptions::setUseLingeringFlag(bool value)
{
    d_useLingeringFlag = value;
}

// ACCESSORS
template <class STREAM>
STREAM& bteso_LingerOptions::bdexStreamOut(STREAM& stream, int version) const
{
    if (stream) {
        switch (version) {
          case 1: {
            bdex_OutStreamFunctions::streamOut(stream, d_timeout, 1);
            bdex_OutStreamFunctions::streamOut(stream, d_useLingeringFlag, 1);
          } break;
          default: {
            stream.invalidate();
          }
        }
        return stream;
    }
}

inline
int bteso_LingerOptions::timeout() const
{
    return d_timeout;
}

inline
bool bteso_LingerOptions::useLingeringFlag() const
{
    return d_useLingeringFlag;
}

// FREE OPERATORS
inline
bool operator==(const bteso_LingerOptions& lhs,
                const bteso_LingerOptions& rhs)
{
    return  lhs.useLingeringFlag() == rhs.useLingeringFlag()
         && lhs.timeout()          == rhs.timeout();
}

inline
bool operator!=(const bteso_LingerOptions& lhs,
                const bteso_LingerOptions& rhs)
{
    return  lhs.useLingeringFlag() != rhs.useLingeringFlag()
         || lhs.timeout()          != rhs.timeout();
}

}  // close namespace BloombergLP
#endif

// ----------------------------------------------------------------------------
// NOTICE:
//      Copyright (C) Bloomberg L.P., 2010
//      All Rights Reserved.
//      Property of Bloomberg L.P. (BLP)
//      This software is made available solely pursuant to the
//      terms of a BLP license agreement which governs its use.
// ------------------------------ END-OF-FILE ---------------------------------
