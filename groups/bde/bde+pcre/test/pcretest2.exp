PCRE version 5.0 13-Sep-2004

/(a)b|/

/abc/
    abc
 0: abc
    defabc
 0: abc
    \Aabc
 0: abc
    *** Failers
No match
    \Adefabc
No match
    ABC
No match

/^abc/
    abc
 0: abc
    \Aabc
 0: abc
    *** Failers
No match
    defabc
No match
    \Adefabc
No match

/a+bc/

/a*bc/

/a{3}bc/

/(abc|a+z)/

/^abc$/
    abc
 0: abc
    *** Failers
No match
    def\nabc
No match

/ab\gdef/X
Failed: unrecognized character follows \ at offset 3

/(?X)ab\gdef/X
Failed: unrecognized character follows \ at offset 7

/x{5,4}/
Failed: numbers out of order in {} quantifier at offset 5

/z{65536}/
Failed: number too big in {} quantifier at offset 7

/[abcd/
Failed: missing terminating ] for character class at offset 5

/(?X)[\B]/
Failed: invalid escape sequence in character class at offset 6

/[z-a]/
Failed: range out of order in character class at offset 3

/^*/
Failed: nothing to repeat at offset 1

/(abc/
Failed: missing ) at offset 4

/(?# abc/
Failed: missing ) after comment at offset 7

/(?z)abc/
Failed: unrecognized character after (? at offset 2

/.*b/

/.*?b/

/cat|dog|elephant/
    this sentence eventually mentions a cat
 0: cat
    this sentences rambles on and on for a while and then reaches elephant
 0: elephant

/cat|dog|elephant/S
    this sentence eventually mentions a cat
 0: cat
    this sentences rambles on and on for a while and then reaches elephant
 0: elephant

/cat|dog|elephant/iS
    this sentence eventually mentions a CAT cat
 0: CAT
    this sentences rambles on and on for a while to elephant ElePhant
 0: elephant

/a|[bcd]/S

/(a|[^\dZ])/S

/(a|b)*[\s]/S

/(ab\2)/
Failed: reference to non-existent subpattern at offset 6

/{4,5}abc/
Failed: nothing to repeat at offset 4

/(a)(b)(c)\2/
    abcb
 0: abcb
 1: a
 2: b
 3: c
    \O0abcb
Matched, but too many substrings
    \O3abcb
Matched, but too many substrings
 0: abcb
    \O6abcb
Matched, but too many substrings
 0: abcb
 1: a
    \O9abcb
Matched, but too many substrings
 0: abcb
 1: a
 2: b
    \O12abcb 
 0: abcb
 1: a
 2: b
 3: c

/(a)bc|(a)(b)\2/
    abc
 0: abc
 1: a
    \O0abc
Matched, but too many substrings
    \O3abc
Matched, but too many substrings
 0: abc
    \O6abc
 0: abc
 1: a
    aba
 0: aba
 1: <unset>
 2: a
 3: b
    \O0aba
Matched, but too many substrings
    \O3aba
Matched, but too many substrings
 0: aba
    \O6aba
Matched, but too many substrings
 0: aba
 1: <unset>
    \O9aba
Matched, but too many substrings
 0: aba
 1: <unset>
 2: a
    \O12aba
 0: aba
 1: <unset>
 2: a
 3: b

/abc$/E
    abc
 0: abc
    *** Failers
No match
    abc\n
No match
    abc\ndef
No match

/(a)(b)(c)(d)(e)\6/
Failed: reference to non-existent subpattern at offset 17

/the quick brown fox/
    the quick brown fox
 0: the quick brown fox
    this is a line with the quick brown fox
 0: the quick brown fox

/the quick brown fox/A
    the quick brown fox
 0: the quick brown fox
    *** Failers
No match
    this is a line with the quick brown fox
No match

/ab(?z)cd/
Failed: unrecognized character after (? at offset 4

/^abc|def/
    abcdef
 0: abc
    abcdef\B
 0: def

/.*((abc)$|(def))/
    defabc
 0: defabc
 1: abc
 2: abc
    \Zdefabc
 0: def
 1: def
 2: <unset>
 3: def

/abc/P
** Unknown option 'P'

/^abc|def/P
** Unknown option 'P'

/.*((abc)$|(def))/P
** Unknown option 'P'

/the quick brown fox/P
** Unknown option 'P'

/the quick brown fox/Pi
** Unknown option 'P'

/abc.def/P
** Unknown option 'P'

/abc$/P
** Unknown option 'P'

/(abc)\2/P
** Unknown option 'P'

/(abc\1)/P
** Unknown option 'P'

/)/
Failed: unmatched parentheses at offset 0

/a[]b/
Failed: missing terminating ] for character class at offset 4

/[^aeiou ]{3,}/
    co-processors, and for 
 0: -pr
    
/<.*>/
    abc<def>ghi<klm>nop
 0: <def>ghi<klm>

/<.*?>/
    abc<def>ghi<klm>nop
 0: <def>

/<.*>/U
    abc<def>ghi<klm>nop
 0: <def>
    
/(?U)<.*>/
    abc<def>ghi<klm>nop
 0: <def>

/<.*?>/U
    abc<def>ghi<klm>nop
 0: <def>ghi<klm>
    
/={3,}/U
    abc========def
 0: ===
    
/(?U)={3,}?/
    abc========def
 0: ========
    
/(?<!bar|cattle)foo/
    foo
 0: foo
    catfoo 
 0: foo
    *** Failers
No match
    the barfoo
No match
    and cattlefoo   
No match

/(?<=a+)b/
Failed: lookbehind assertion is not fixed length at offset 6

/(?<=aaa|b{0,3})b/
Failed: lookbehind assertion is not fixed length at offset 14

/(?<!(foo)a\1)bar/
Failed: lookbehind assertion is not fixed length at offset 12

/(?i)abc/

/(a|(?m)a)/

/(?i)^1234/

/(^b|(?i)^d)/

/(?s).*/

/[abcd]/S

/(?i)[abcd]/S

/(?m)[xy]|(b|c)/S

/(^a|^b)/m

/(?i)(^a|^b)/m

/(a)(?(1)a|b|c)/
Failed: conditional group contains more than two branches at offset 13

/(?(?=a)a|b|c)/
Failed: conditional group contains more than two branches at offset 12

/(?(1a)/
Failed: malformed number after (?( at offset 4

/(?(?i))/
Failed: assertion expected after (?( at offset 3

/(?(abc))/
Failed: assertion expected after (?( at offset 3

/(?(?<ab))/
Failed: unrecognized character after (?< at offset 5

/((?s)blah)\s+\1/

/((?i)blah)\s+\1/

/((?i)b)/DS
------------------------------------------------------------------
  0  15 Bra 0
  3   7 Bra 1
  6  01 Opt
  8  NC b
 10   7 Ket
 13  00 Opt
 15  15 Ket
 18     End
------------------------------------------------------------------
Capturing subpattern count = 1
No options
Case state changes
First char = 'b' (caseless)
No need char
Study returned NULL

/(a*b|(?i:c*(?-i)d))/S

/a$/
    a
 0: a
    a\n
 0: a
    *** Failers 
No match
    \Za
No match
    \Za\n   
No match

/a$/m
    a
 0: a
    a\n
 0: a
    \Za\n   
 0: a
    *** Failers 
No match
    \Za
No match
    
/\Aabc/m

/^abc/m 

/^((a+)(?U)([ab]+)(?-U)([bc]+)(\w*))/
  aaaaabbbbbcccccdef
 0: aaaaabbbbbcccccdef
 1: aaaaabbbbbcccccdef
 2: aaaaa
 3: b
 4: bbbbccccc
 5: def

/(?<=foo)[ab]/S

/(?<!foo)(alpha|omega)/S

/(?!alphabet)[ab]/S

/(?<=foo\n)^bar/m
    foo\nbarbar 
 0: bar
    ***Failers
No match
    rhubarb 
No match
    barbell
No match
    abc\nbarton 
No match

/^(?<=foo\n)bar/m
    foo\nbarbar 
 0: bar
    ***Failers
No match
    rhubarb 
No match
    barbell
No match
    abc\nbarton 
No match

/(?>^abc)/m
    abc
 0: abc
    def\nabc
 0: abc
    *** Failers
No match
    defabc   
No match

/(?<=ab(c+)d)ef/
Failed: lookbehind assertion is not fixed length at offset 11

/(?<=ab(?<=c+)d)ef/
Failed: lookbehind assertion is not fixed length at offset 12

/(?<=ab(c|de)f)g/
Failed: lookbehind assertion is not fixed length at offset 13

/The next three are in testinput2 because they have variable length branches/

/(?<=bullock|donkey)-cart/
    the bullock-cart
 0: -cart
    a donkey-cart race
 0: -cart
    *** Failers
No match
    cart
No match
    horse-and-cart    
No match
      
/(?<=ab(?i)x|y|z)/

/(?>.*)(?<=(abcd)|(xyz))/
    alphabetabcd
 0: alphabetabcd
 1: abcd
    endingxyz
 0: endingxyz
 1: <unset>
 2: xyz

/(?<=ab(?i)x(?-i)y|(?i)z|b)ZZ/
    abxyZZ
 0: ZZ
    abXyZZ
 0: ZZ
    ZZZ
 0: ZZ
    zZZ
 0: ZZ
    bZZ
 0: ZZ
    BZZ     
 0: ZZ
    *** Failers
No match
    ZZ 
No match
    abXYZZ 
No match
    zzz
No match
    bzz  
No match

/(?<!(foo)a)bar/
    bar
 0: bar
    foobbar 
 0: bar
    *** Failers
No match
    fooabar  
No match

/This one is here because Perl 5.005_02 doesn't fail it/

/^(a)?(?(1)a|b)+$/
    *** Failers
No match
    a 
No match

/This one is here because I think Perl 5.005_02 gets the setting of $1 wrong/

/^(a\1?){4}$/
    aaaaaa
 0: aaaaaa
 1: aa
    
/These are syntax tests from Perl 5.005/

/a[b-a]/
Failed: range out of order in character class at offset 4

/a[]b/
Failed: missing terminating ] for character class at offset 4

/a[/
Failed: missing terminating ] for character class at offset 2

/*a/
Failed: nothing to repeat at offset 0

/(*)b/
Failed: nothing to repeat at offset 1

/abc)/
Failed: unmatched parentheses at offset 3

/(abc/
Failed: missing ) at offset 4

/a**/
Failed: nothing to repeat at offset 2

/)(/
Failed: unmatched parentheses at offset 0

/\1/
Failed: reference to non-existent subpattern at offset 2

/\2/
Failed: reference to non-existent subpattern at offset 2

/(a)|\2/
Failed: reference to non-existent subpattern at offset 6

/a[b-a]/i
Failed: range out of order in character class at offset 4

/a[]b/i
Failed: missing terminating ] for character class at offset 4

/a[/i
Failed: missing terminating ] for character class at offset 2

/*a/i
Failed: nothing to repeat at offset 0

/(*)b/i
Failed: nothing to repeat at offset 1

/abc)/i
Failed: unmatched parentheses at offset 3

/(abc/i
Failed: missing ) at offset 4

/a**/i
Failed: nothing to repeat at offset 2

/)(/i
Failed: unmatched parentheses at offset 0

/:(?:/
Failed: missing ) at offset 4

/(?<%)b/
Failed: unrecognized character after (?< at offset 3

/a(?{)b/
Failed: unrecognized character after (? at offset 3

/a(?{{})b/
Failed: unrecognized character after (? at offset 3

/a(?{}})b/
Failed: unrecognized character after (? at offset 3

/a(?{"{"})b/
Failed: unrecognized character after (? at offset 3

/a(?{"{"}})b/
Failed: unrecognized character after (? at offset 3

/(?(1?)a|b)/
Failed: malformed number after (?( at offset 4

/(?(1)a|b|c)/
Failed: conditional group contains more than two branches at offset 10

/[a[:xyz:/
Failed: missing terminating ] for character class at offset 8

/(?<=x+)y/
Failed: lookbehind assertion is not fixed length at offset 6

/a{37,17}/
Failed: numbers out of order in {} quantifier at offset 7

/abc/\
Failed: \ at end of pattern at offset 4

/abc/\P
** Unknown option 'P'

/abc/\i
Failed: \ at end of pattern at offset 4

/(a)bc(d)/
    abcd
 0: abcd
 1: a
 2: d
    abcd\C2
 0: abcd
 1: a
 2: d
 2C d (1)
    abcd\C5
 0: abcd
 1: a
 2: d
copy substring 5 failed -7
     
/(.{20})/
    abcdefghijklmnopqrstuvwxyz
 0: abcdefghijklmnopqrst
 1: abcdefghijklmnopqrst
    abcdefghijklmnopqrstuvwxyz\C1
 0: abcdefghijklmnopqrst
 1: abcdefghijklmnopqrst
copy substring 1 failed -6
    abcdefghijklmnopqrstuvwxyz\G1
 0: abcdefghijklmnopqrst
 1: abcdefghijklmnopqrst
 1G abcdefghijklmnopqrst (20)
     
/(.{15})/
    abcdefghijklmnopqrstuvwxyz
 0: abcdefghijklmno
 1: abcdefghijklmno
    abcdefghijklmnopqrstuvwxyz\C1\G1
 0: abcdefghijklmno
 1: abcdefghijklmno
 1C abcdefghijklmno (15)
 1G abcdefghijklmno (15)

/(.{16})/
    abcdefghijklmnopqrstuvwxyz
 0: abcdefghijklmnop
 1: abcdefghijklmnop
    abcdefghijklmnopqrstuvwxyz\C1\G1\L
 0: abcdefghijklmnop
 1: abcdefghijklmnop
copy substring 1 failed -6
 1G abcdefghijklmnop (16)
 0L abcdefghijklmnop
 1L abcdefghijklmnop
    
/^(a|(bc))de(f)/
    adef\G1\G2\G3\G4\L 
 0: adef
 1: a
 2: <unset>
 3: f
 1G a (1)
 2G  (0)
 3G f (1)
get substring 4 failed -7
 0L adef
 1L a
 2L 
 3L f
    bcdef\G1\G2\G3\G4\L 
 0: bcdef
 1: bc
 2: bc
 3: f
 1G bc (2)
 2G bc (2)
 3G f (1)
get substring 4 failed -7
 0L bcdef
 1L bc
 2L bc
 3L f
    adefghijk\C0 
 0: adef
 1: a
 2: <unset>
 3: f
 0C adef (4)
    
/^abc\00def/
    abc\00def\L\C0 
 0: abc\x00def
 0C abc (7)
 0L abc
    
/word ((?:[a-zA-Z0-9]+ )((?:[a-zA-Z0-9]+ )((?:[a-zA-Z0-9]+ )((?:[a-zA-Z0-9]+ 
)((?:[a-zA-Z0-9]+ )((?:[a-zA-Z0-9]+ )((?:[a-zA-Z0-9]+ )((?:[a-zA-Z0-9]+ 
)?)?)?)?)?)?)?)?)?otherword/M

/.*X/D
------------------------------------------------------------------
  0   7 Bra 0
  3     Any*
  5     X
  7   7 Ket
 10     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
No options
First char at start or follows \n
Need char = 'X'

/.*X/Ds
------------------------------------------------------------------
  0   7 Bra 0
  3     Any*
  5     X
  7   7 Ket
 10     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
Options: anchored dotall
No first char
Need char = 'X'

/(.*X|^B)/D
------------------------------------------------------------------
  0  19 Bra 0
  3   7 Bra 1
  6     Any*
  8     X
 10   6 Alt
 13     ^
 14     B
 16  13 Ket
 19  19 Ket
 22     End
------------------------------------------------------------------
Capturing subpattern count = 1
Partial matching not supported
No options
First char at start or follows \n
No need char

/(.*X|^B)/Ds
------------------------------------------------------------------
  0  19 Bra 0
  3   7 Bra 1
  6     Any*
  8     X
 10   6 Alt
 13     ^
 14     B
 16  13 Ket
 19  19 Ket
 22     End
------------------------------------------------------------------
Capturing subpattern count = 1
Partial matching not supported
Options: anchored dotall
No first char
No need char
    
/(?s)(.*X|^B)/D
------------------------------------------------------------------
  0  19 Bra 0
  3   7 Bra 1
  6     Any*
  8     X
 10   6 Alt
 13     ^
 14     B
 16  13 Ket
 19  19 Ket
 22     End
------------------------------------------------------------------
Capturing subpattern count = 1
Partial matching not supported
Options: anchored dotall
No first char
No need char

/(?s:.*X|^B)/D
------------------------------------------------------------------
  0  25 Bra 0
  3   9 Bra 0
  6  04 Opt
  8     Any*
 10     X
 12   8 Alt
 15  04 Opt
 17     ^
 18     B
 20  17 Ket
 23  00 Opt
 25  25 Ket
 28     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
No options
First char at start or follows \n
No need char

/\Biss\B/+
    Mississippi
 0: iss
 0+ issippi

/\Biss\B/+P
** Unknown option 'P'

/iss/G+
    Mississippi
 0: iss
 0+ issippi
 0: iss
 0+ ippi

/\Biss\B/G+
    Mississippi
 0: iss
 0+ issippi

/\Biss\B/g+
    Mississippi
 0: iss
 0+ issippi
 0: iss
 0+ ippi
    *** Failers
No match
    Mississippi\A
No match

/(?<=[Ms])iss/g+
    Mississippi
 0: iss
 0+ issippi
 0: iss
 0+ ippi

/(?<=[Ms])iss/G+
    Mississippi
 0: iss
 0+ issippi

/^iss/g+
    ississippi
 0: iss
 0+ issippi
    
/.*iss/g+
    abciss\nxyzisspqr 
 0: abciss
 0+ \x0axyzisspqr
 0: xyziss
 0+ pqr

/.i./+g
    Mississippi
 0: Mis
 0+ sissippi
 0: sis
 0+ sippi
 0: sip
 0+ pi
    Mississippi\A
 0: Mis
 0+ sissippi
 0: sis
 0+ sippi
 0: sip
 0+ pi
    Missouri river
 0: Mis
 0+ souri river
 0: ri 
 0+ river
 0: riv
 0+ er
    Missouri river\A  
 0: Mis
 0+ souri river

/^.is/+g
    Mississippi
 0: Mis
 0+ sissippi

/^ab\n/g+
    ab\nab\ncd
 0: ab\x0a
 0+ ab\x0acd

/^ab\n/mg+
    ab\nab\ncd
 0: ab\x0a
 0+ ab\x0acd
 0: ab\x0a
 0+ cd

/abc/

/abc|bac/

/(abc|bac)/

/(abc|(c|dc))/

/(abc|(d|de)c)/

/a*/

/a+/

/(baa|a+)/

/a{0,3}/

/baa{3,}/

/"([^\\"]+|\\.)*"/

/(abc|ab[cd])/

/(a|.)/

/a|ba|\w/

/abc(?=pqr)/

/...(?<=abc)/

/abc(?!pqr)/

/ab./

/ab[xyz]/

/abc*/

/ab.c*/

/a.c*/

/.c*/

/ac*/

/(a.c*|b.c*)/

/a.c*|aba/

/.+a/

/(?=abcda)a.*/

/(?=a)a.*/

/a(b)*/

/a\d*/

/ab\d*/

/a(\d)*/

/abcde{0,0}/

/ab\d+/

/a(?(1)b)/

/a(?(1)bag|big)/

/a(?(1)bag|big)*/

/a(?(1)bag|big)+/

/a(?(1)b..|b..)/

/ab\d{0}e/

/a?b?/
    a
 0: a
    b
 0: b
    ab
 0: ab
    \
 0: 
    *** Failers
 0: 
    \N     
No match
    
/|-/
    abcd
 0: 
    -abc
 0: 
    \Nab-c
 0: -
    *** Failers
 0: 
    \Nabc     
No match

/a*(b+)(z)(z)/P
** Unknown option 'P'

/^.?abcd/S 

/\(             # ( at start
  (?:           # Non-capturing bracket
  (?>[^()]+)    # Either a sequence of non-brackets (no backtracking)
  |             # Or
  (?R)          # Recurse - i.e. nested bracketed string
  )*            # Zero or more contents
  \)            # Closing )
  /x
    (abcd)
 0: (abcd)
    (abcd)xyz
 0: (abcd)
    xyz(abcd)
 0: (abcd)
    (ab(xy)cd)pqr 
 0: (ab(xy)cd)
    (ab(xycd)pqr 
 0: (xycd)
    () abc () 
 0: ()
    12(abcde(fsh)xyz(foo(bar))lmno)89
 0: (abcde(fsh)xyz(foo(bar))lmno)
    *** Failers
No match
    abcd 
No match
    abcd)
No match
    (abcd  
No match

/\(  ( (?>[^()]+) | (?R) )* \) /xg
    (ab(xy)cd)pqr 
 0: (ab(xy)cd)
 1: cd
    1(abcd)(x(y)z)pqr
 0: (abcd)
 1: abcd
 0: (x(y)z)
 1: z

/\(  (?: (?>[^()]+) | (?R) ) \) /x
    (abcd)
 0: (abcd)
    (ab(xy)cd)
 0: (xy)
    (a(b(c)d)e) 
 0: (c)
    ((ab)) 
 0: ((ab))
    *** Failers
No match
    ()   
No match

/\(  (?: (?>[^()]+) | (?R) )? \) /x
    ()
 0: ()
    12(abcde(fsh)xyz(foo(bar))lmno)89
 0: (fsh)

/\(  ( (?>[^()]+) | (?R) )* \) /x
    (ab(xy)cd)
 0: (ab(xy)cd)
 1: cd

/\( ( ( (?>[^()]+) | (?R) )* ) \) /x
    (ab(xy)cd)
 0: (ab(xy)cd)
 1: ab(xy)cd
 2: cd

/\( (123)? ( ( (?>[^()]+) | (?R) )* ) \) /x
    (ab(xy)cd)
 0: (ab(xy)cd)
 1: <unset>
 2: ab(xy)cd
 3: cd
    (123ab(xy)cd)
 0: (123ab(xy)cd)
 1: 123
 2: ab(xy)cd
 3: cd

/\( ( (123)? ( (?>[^()]+) | (?R) )* ) \) /x
    (ab(xy)cd)
 0: (ab(xy)cd)
 1: ab(xy)cd
 2: <unset>
 3: cd
    (123ab(xy)cd)
 0: (123ab(xy)cd)
 1: 123ab(xy)cd
 2: 123
 3: cd

/\( (((((((((( ( (?>[^()]+) | (?R) )* )))))))))) \) /x
    (ab(xy)cd)
 0: (ab(xy)cd)
 1: ab(xy)cd
 2: ab(xy)cd
 3: ab(xy)cd
 4: ab(xy)cd
 5: ab(xy)cd
 6: ab(xy)cd
 7: ab(xy)cd
 8: ab(xy)cd
 9: ab(xy)cd
10: ab(xy)cd
11: cd

/\( ( ( (?>[^()<>]+) | ((?>[^()]+)) | (?R) )* ) \) /x
    (abcd(xyz<p>qrs)123)
 0: (abcd(xyz<p>qrs)123)
 1: abcd(xyz<p>qrs)123
 2: 123
 3: <unset>

/\( ( ( (?>[^()]+) | ((?R)) )* ) \) /x
    (ab(cd)ef)
 0: (ab(cd)ef)
 1: ab(cd)ef
 2: ef
 3: (cd)
    (ab(cd(ef)gh)ij)
 0: (ab(cd(ef)gh)ij)
 1: ab(cd(ef)gh)ij
 2: ij
 3: (cd(ef)gh)

/^[[:alnum:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [0-9A-Za-z]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:^alnum:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\x00-/:-@[-`{-\xff]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:alpha:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [A-Za-z]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:^alpha:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\x00-@[-`{-\xff]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char
             
/^[[:ascii:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\x00-\x7f]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:^ascii:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\x80-\xff]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:blank:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\x09 ]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:cntrl:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\x00-\x1f\x7f]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:digit:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [0-9]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:graph:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [!-~]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:lower:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [a-z]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:print:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [ -~]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:punct:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [!-/:-@[-`{-~]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:space:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\x09-\x0d ]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:upper:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [A-Z]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:xdigit:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [0-9A-Fa-f]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:word:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [0-9A-Z_a-z]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:^cntrl:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [ -~\x80-\xff]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[12[:^digit:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\x00-/12:-\xff]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:^blank:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\x00-\x08\x0a-\x1f!-\xff]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/[01[:alpha:]%]/D
------------------------------------------------------------------
  0  36 Bra 0
  3     [%01A-Za-z]
 36  36 Ket
 39     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
No first char
No need char

/[[.ch.]]/
Failed: POSIX collating elements are not supported at offset 1

/[[=ch=]]/
Failed: POSIX collating elements are not supported at offset 1

/[[:rhubarb:]]/
Failed: unknown POSIX class name at offset 3

/[[:upper:]]/i
    A
 0: A
    a 
 0: a
    
/[[:lower:]]/i
    A
 0: A
    a 
 0: a

/((?-i)[[:lower:]])[[:lower:]]/i
    ab
 0: ab
 1: a
    aB
 0: aB
 1: a
    *** Failers
 0: ai
 1: a
    Ab
No match
    AB        
No match

/[\200-\410]/
Failed: range out of order in character class at offset 9

/^(?(0)f|b)oo/
Failed: invalid condition (?(0) at offset 5

/This one's here because of the large output vector needed/

/(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\w+)\s+(\270)/
    \O900 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 ABC ABC
 0: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 ABC ABC
 1: 1 
 2: 2 
 3: 3 
 4: 4 
 5: 5 
 6: 6 
 7: 7 
 8: 8 
 9: 9 
10: 10 
11: 11 
12: 12 
13: 13 
14: 14 
15: 15 
16: 16 
17: 17 
18: 18 
19: 19 
20: 20 
21: 21 
22: 22 
23: 23 
24: 24 
25: 25 
26: 26 
27: 27 
28: 28 
29: 29 
30: 30 
31: 31 
32: 32 
33: 33 
34: 34 
35: 35 
36: 36 
37: 37 
38: 38 
39: 39 
40: 40 
41: 41 
42: 42 
43: 43 
44: 44 
45: 45 
46: 46 
47: 47 
48: 48 
49: 49 
50: 50 
51: 51 
52: 52 
53: 53 
54: 54 
55: 55 
56: 56 
57: 57 
58: 58 
59: 59 
60: 60 
61: 61 
62: 62 
63: 63 
64: 64 
65: 65 
66: 66 
67: 67 
68: 68 
69: 69 
70: 70 
71: 71 
72: 72 
73: 73 
74: 74 
75: 75 
76: 76 
77: 77 
78: 78 
79: 79 
80: 80 
81: 81 
82: 82 
83: 83 
84: 84 
85: 85 
86: 86 
87: 87 
88: 88 
89: 89 
90: 90 
91: 91 
92: 92 
93: 93 
94: 94 
95: 95 
96: 96 
97: 97 
98: 98 
99: 99 
100: 100 
101: 101 
102: 102 
103: 103 
104: 104 
105: 105 
106: 106 
107: 107 
108: 108 
109: 109 
110: 110 
111: 111 
112: 112 
113: 113 
114: 114 
115: 115 
116: 116 
117: 117 
118: 118 
119: 119 
120: 120 
121: 121 
122: 122 
123: 123 
124: 124 
125: 125 
126: 126 
127: 127 
128: 128 
129: 129 
130: 130 
131: 131 
132: 132 
133: 133 
134: 134 
135: 135 
136: 136 
137: 137 
138: 138 
139: 139 
140: 140 
141: 141 
142: 142 
143: 143 
144: 144 
145: 145 
146: 146 
147: 147 
148: 148 
149: 149 
150: 150 
151: 151 
152: 152 
153: 153 
154: 154 
155: 155 
156: 156 
157: 157 
158: 158 
159: 159 
160: 160 
161: 161 
162: 162 
163: 163 
164: 164 
165: 165 
166: 166 
167: 167 
168: 168 
169: 169 
170: 170 
171: 171 
172: 172 
173: 173 
174: 174 
175: 175 
176: 176 
177: 177 
178: 178 
179: 179 
180: 180 
181: 181 
182: 182 
183: 183 
184: 184 
185: 185 
186: 186 
187: 187 
188: 188 
189: 189 
190: 190 
191: 191 
192: 192 
193: 193 
194: 194 
195: 195 
196: 196 
197: 197 
198: 198 
199: 199 
200: 200 
201: 201 
202: 202 
203: 203 
204: 204 
205: 205 
206: 206 
207: 207 
208: 208 
209: 209 
210: 210 
211: 211 
212: 212 
213: 213 
214: 214 
215: 215 
216: 216 
217: 217 
218: 218 
219: 219 
220: 220 
221: 221 
222: 222 
223: 223 
224: 224 
225: 225 
226: 226 
227: 227 
228: 228 
229: 229 
230: 230 
231: 231 
232: 232 
233: 233 
234: 234 
235: 235 
236: 236 
237: 237 
238: 238 
239: 239 
240: 240 
241: 241 
242: 242 
243: 243 
244: 244 
245: 245 
246: 246 
247: 247 
248: 248 
249: 249 
250: 250 
251: 251 
252: 252 
253: 253 
254: 254 
255: 255 
256: 256 
257: 257 
258: 258 
259: 259 
260: 260 
261: 261 
262: 262 
263: 263 
264: 264 
265: 265 
266: 266 
267: 267 
268: 268 
269: 269 
270: ABC
271: ABC

/This one's here because Perl does this differently and PCRE can't at present/

/(main(O)?)+/
    mainmain
 0: mainmain
 1: main
    mainOmain
 0: mainOmain
 1: main
 2: O
    
/These are all cases where Perl does it differently (nested captures)/

/^(a(b)?)+$/
    aba
 0: aba
 1: a
 2: b
   
/^(aa(bb)?)+$/
    aabbaa    
 0: aabbaa
 1: aa
 2: bb
    
/^(aa|aa(bb))+$/
    aabbaa 
 0: aabbaa
 1: aa
 2: bb
    
/^(aa(bb)??)+$/
    aabbaa    
 0: aabbaa
 1: aa
 2: bb
    
/^(?:aa(bb)?)+$/
    aabbaa    
 0: aabbaa
 1: bb
    
/^(aa(b(b))?)+$/
    aabbaa    
 0: aabbaa
 1: aa
 2: bb
 3: b

/^(?:aa(b(b))?)+$/
    aabbaa    
 0: aabbaa
 1: bb
 2: b

/^(?:aa(b(?:b))?)+$/
    aabbaa    
 0: aabbaa
 1: bb

/^(?:aa(bb(?:b))?)+$/
    aabbbaa    
 0: aabbbaa
 1: bbb
    
/^(?:aa(b(?:bb))?)+$/
    aabbbaa    
 0: aabbbaa
 1: bbb

/^(?:aa(?:b(b))?)+$/
    aabbaa    
 0: aabbaa
 1: b

/^(?:aa(?:b(bb))?)+$/
    aabbbaa    
 0: aabbbaa
 1: bb

/^(aa(b(bb))?)+$/
    aabbbaa    
 0: aabbbaa
 1: aa
 2: bbb
 3: bb

/^(aa(bb(bb))?)+$/
    aabbbbaa    
 0: aabbbbaa
 1: aa
 2: bbbb
 3: bb

/--------------------------------------------------------------------/ 
    
/#/xMD
------------------------------------------------------------------
  0   3 Bra 0
  3   3 Ket
  6     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: extended
No first char
No need char

/a#/xMD
------------------------------------------------------------------
  0   5 Bra 0
  3     a
  5   5 Ket
  8     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: extended
First char = 'a'
No need char

/[\s]/D
------------------------------------------------------------------
  0  36 Bra 0
  3     [\x09\x0a\x0c\x0d ]
 36  36 Ket
 39     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
No first char
No need char

/[\S]/D
------------------------------------------------------------------
  0  36 Bra 0
  3     [\x00-\x08\x0b\x0e-\x1f!-\xff]
 36  36 Ket
 39     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
No first char
No need char

/a(?i)b/D
------------------------------------------------------------------
  0   9 Bra 0
  3     a
  5  01 Opt
  7  NC b
  9   9 Ket
 12     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
Case state changes
First char = 'a'
Need char = 'b' (caseless)
    ab
 0: ab
    aB
 0: aB
    *** Failers 
No match
    AB  
No match

/(a(?i)b)/D
------------------------------------------------------------------
  0  17 Bra 0
  3   9 Bra 1
  6     a
  8  01 Opt
 10  NC b
 12   9 Ket
 15  00 Opt
 17  17 Ket
 20     End
------------------------------------------------------------------
Capturing subpattern count = 1
No options
Case state changes
First char = 'a'
Need char = 'b' (caseless)
    ab
 0: ab
 1: ab
    aB
 0: aB
 1: aB
    *** Failers 
No match
    AB  
No match
    
/   (?i)abc/xD
------------------------------------------------------------------
  0   9 Bra 0
  3  NC abc
  9   9 Ket
 12     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: caseless extended
First char = 'a' (caseless)
Need char = 'c' (caseless)

/#this is a comment
  (?i)abc/xD
------------------------------------------------------------------
  0   9 Bra 0
  3  NC abc
  9   9 Ket
 12     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: caseless extended
First char = 'a' (caseless)
Need char = 'c' (caseless)

/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890/D
------------------------------------------------------------------
  0 603 Bra 0
  3     123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
603 603 Ket
606     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = '1'
Need char = '0'

/\Q123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890/D
------------------------------------------------------------------
  0 603 Bra 0
  3     123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
603 603 Ket
606     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = '1'
Need char = '0'

/\Q\E/D
------------------------------------------------------------------
  0   3 Bra 0
  3   3 Ket
  6     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
No first char
No need char
    \
 0: 

/\Q\Ex/D
------------------------------------------------------------------
  0   5 Bra 0
  3     x
  5   5 Ket
  8     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = 'x'
No need char

/ \Q\E/D
------------------------------------------------------------------
  0   5 Bra 0
  3      
  5   5 Ket
  8     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = ' '
No need char

/a\Q\E/D
------------------------------------------------------------------
  0   5 Bra 0
  3     a
  5   5 Ket
  8     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = 'a'
No need char
  abc
 0: a
  bca
 0: a
  bac  
 0: a

/a\Q\Eb/D
------------------------------------------------------------------
  0   7 Bra 0
  3     ab
  7   7 Ket
 10     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'b'
  abc
 0: ab

/\Q\Eabc/D
------------------------------------------------------------------
  0   9 Bra 0
  3     abc
  9   9 Ket
 12     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'c'

/x*+\w/D
------------------------------------------------------------------
  0  12 Bra 0
  3   5 Once
  6     x*
  8   5 Ket
 11     \w
 12  12 Ket
 15     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
No need char
    *** Failers
 0: F
    xxxxx
No match
    
/x?+/D
------------------------------------------------------------------
  0  11 Bra 0
  3   5 Once
  6     x?
  8   5 Ket
 11  11 Ket
 14     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
No first char
No need char

/x++/D
------------------------------------------------------------------
  0  11 Bra 0
  3   5 Once
  6     x+
  8   5 Ket
 11  11 Ket
 14     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'x'
No need char

/x{1,3}+/D 
------------------------------------------------------------------
  0  15 Bra 0
  3   9 Once
  6     x
  8     x{,2}
 12   9 Ket
 15  15 Ket
 18     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'x'
No need char

/(x)*+/D
------------------------------------------------------------------
  0  18 Bra 0
  3  12 Once
  6     Brazero
  7   5 Bra 1
 10     x
 12   5 KetRmax
 15  12 Ket
 18  18 Ket
 21     End
------------------------------------------------------------------
Capturing subpattern count = 1
No options
No first char
No need char

/^(\w++|\s++)*$/
    now is the time for all good men to come to the aid of the party
 0: now is the time for all good men to come to the aid of the party
 1: party
    *** Failers
No match
    this is not a line with only words and spaces!
No match
    
/(\d++)(\w)/
    12345a
 0: 12345a
 1: 12345
 2: a
    *** Failers
No match
    12345+ 
No match

/a++b/
    aaab
 0: aaab

/(a++b)/
    aaab
 0: aaab
 1: aaab

/(a++)b/
    aaab
 0: aaab
 1: aaa

/([^()]++|\([^()]*\))+/
    ((abc(ade)ufh()()x
 0: abc(ade)ufh()()x
 1: x
    
/\(([^()]++|\([^()]+\))+\)/ 
    (abc)
 0: (abc)
 1: abc
    (abc(def)xyz)
 0: (abc(def)xyz)
 1: xyz
    *** Failers
No match
    ((()aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa   
No match

/(abc){1,3}+/D
------------------------------------------------------------------
  0  53 Bra 0
  3  47 Once
  6   9 Bra 1
  9     abc
 15   9 Ket
 18     Brazero
 19  28 Bra 0
 22   9 Bra 1
 25     abc
 31   9 Ket
 34     Brazero
 35   9 Bra 1
 38     abc
 44   9 Ket
 47  28 Ket
 50  47 Ket
 53  53 Ket
 56     End
------------------------------------------------------------------
Capturing subpattern count = 1
No options
First char = 'a'
Need char = 'c'

/a+?+/
Failed: nothing to repeat at offset 3

/a{2,3}?+b/
Failed: nothing to repeat at offset 7

/(?U)a+?+/
Failed: nothing to repeat at offset 7

/a{2,3}?+b/U
Failed: nothing to repeat at offset 7

/x(?U)a++b/D
------------------------------------------------------------------
  0  15 Bra 0
  3     x
  5   5 Once
  8     a+
 10   5 Ket
 13     b
 15  15 Ket
 18     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'x'
Need char = 'b'
    xaaaab
 0: xaaaab

/(?U)xa++b/D
------------------------------------------------------------------
  0  15 Bra 0
  3     x
  5   5 Once
  8     a+
 10   5 Ket
 13     b
 15  15 Ket
 18     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
Options: ungreedy
First char = 'x'
Need char = 'b'
    xaaaab
 0: xaaaab

/^((a+)(?U)([ab]+)(?-U)([bc]+)(\w*))/D
------------------------------------------------------------------
  0 106 Bra 0
  3     ^
  4  99 Bra 1
  7   5 Bra 2
 10     a+
 12   5 Ket
 15  37 Bra 3
 18     [ab]+?
 52  37 Ket
 55  37 Bra 4
 58     [bc]+
 92  37 Ket
 95   5 Bra 5
 98     \w*
100   5 Ket
103  99 Ket
106 106 Ket
109     End
------------------------------------------------------------------
Capturing subpattern count = 5
Partial matching not supported
Options: anchored
No first char
No need char

/^x(?U)a+b/D
------------------------------------------------------------------
  0  10 Bra 0
  3     ^
  4     x
  6     a+?
  8     b
 10  10 Ket
 13     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
Options: anchored
No first char
Need char = 'b'

/^x(?U)(a+)b/D
------------------------------------------------------------------
  0  16 Bra 0
  3     ^
  4     x
  6   5 Bra 1
  9     a+?
 11   5 Ket
 14     b
 16  16 Ket
 19     End
------------------------------------------------------------------
Capturing subpattern count = 1
Partial matching not supported
Options: anchored
No first char
Need char = 'b'

/[.x.]/
Failed: POSIX collating elements are not supported at offset 0

/[=x=]/
Failed: POSIX collating elements are not supported at offset 0

/[:x:]/
Failed: POSIX named classes are supported only within a class at offset 0

/\l/
Failed: PCRE does not support \L, \l, \N, \U, or \u at offset 1

/\L/
Failed: PCRE does not support \L, \l, \N, \U, or \u at offset 1

/\N{name}/
Failed: PCRE does not support \L, \l, \N, \U, or \u at offset 1

/\u/
Failed: PCRE does not support \L, \l, \N, \U, or \u at offset 1

/\U/
Failed: PCRE does not support \L, \l, \N, \U, or \u at offset 1

/[/
Failed: missing terminating ] for character class at offset 1

/[a-/
Failed: missing terminating ] for character class at offset 3

/[[:space:]/
Failed: missing terminating ] for character class at offset 10

/[\s]/DM
------------------------------------------------------------------
  0  36 Bra 0
  3     [\x09\x0a\x0c\x0d ]
 36  36 Ket
 39     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
No first char
No need char

/[[:space:]]/DM
------------------------------------------------------------------
  0  36 Bra 0
  3     [\x09-\x0d ]
 36  36 Ket
 39     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
No first char
No need char

/[[:space:]abcde]/DM
------------------------------------------------------------------
  0  36 Bra 0
  3     [\x09-\x0d a-e]
 36  36 Ket
 39     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
No first char
No need char

/< (?: (?(R) \d++  | [^<>]*+) | (?R)) * >/x
    <>
 0: <>
    <abcd>
 0: <abcd>
    <abc <123> hij>
 0: <abc <123> hij>
    <abc <def> hij>
 0: <def>
    <abc<>def> 
 0: <abc<>def>
    <abc<>      
 0: <>
    *** Failers
No match
    <abc
No match

|8J\$WE\<\.rX\+ix\[d1b\!H\#\?vV0vrK\:ZH1\=2M\>iV\;\?aPhFB\<\*vW\@QW\@sO9\}cfZA\-i\'w\%hKd6gt1UJP\,15_\#QY\$M\^Mss_U\/\]\&LK9\[5vQub\^w\[KDD\<EjmhUZ\?\.akp2dF\>qmj\;2\}YWFdYx\.Ap\]hjCPTP\(n28k\+3\;o\&WXqs\/gOXdr\$\:r\'do0\;b4c\(f_Gr\=\"\\4\)\[01T7ajQJvL\$W\~mL_sS\/4h\:x\*\[ZN\=KLs\&L5zX\/\/\>it\,o\:aU\(\;Z\>pW\&T7oP\'2K\^E\:x9\'c\[\%z\-\,64JQ5AeH_G\#KijUKghQw\^\\vea3a\?kka_G\$8\#\`\*kynsxzBLru\'\]k_\[7FrVx\}\^\=\$blx\>s\-N\%j\;D\*aZDnsw\:YKZ\%Q\.Kne9\#hP\?\+b3\(SOvL\,\^\;\&u5\@\?5C5Bhb\=m\-vEh_L15Jl\]U\)0RP6\{q\%L\^_z5E\'Dw6X\b|DM
------------------------------------------------------------------
  0 822 Bra 0
  3     8J$WE<.rX+ix[d1b!H#?vV0vrK:ZH1=2M>iV;?aPhFB<*vW@QW@sO9}cfZA-i'w%hKd6gt1UJP,15_#QY$M^Mss_U/]&LK9[5vQub^w[KDD<EjmhUZ?.akp2dF>qmj;2}YWFdYx.Ap]hjCPTP(n28k+3;o&WXqs/gOXdr$:r'do0;b4c(f_Gr="\4)[01T7ajQJvL$W~mL_sS/4h:x*[ZN=KLs&L5zX//>it,o:aU(;Z>pW&T7oP'2K^E:x9'c[%z-,64JQ5AeH_G#KijUKghQw^\vea3a?kka_G$8#`*kynsxzBLru']k_[7FrVx}^=$blx>s-N%j;D*aZDnsw:YKZ%Q.Kne9#hP?+b3(SOvL,^;&u5@?5C5Bhb=m-vEh_L15Jl]U)0RP6{q%L^_z5E'Dw6X
821     \b
822 822 Ket
825     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = '8'
Need char = 'X'

|\$\<\.X\+ix\[d1b\!H\#\?vV0vrK\:ZH1\=2M\>iV\;\?aPhFB\<\*vW\@QW\@sO9\}cfZA\-i\'w\%hKd6gt1UJP\,15_\#QY\$M\^Mss_U\/\]\&LK9\[5vQub\^w\[KDD\<EjmhUZ\?\.akp2dF\>qmj\;2\}YWFdYx\.Ap\]hjCPTP\(n28k\+3\;o\&WXqs\/gOXdr\$\:r\'do0\;b4c\(f_Gr\=\"\\4\)\[01T7ajQJvL\$W\~mL_sS\/4h\:x\*\[ZN\=KLs\&L5zX\/\/\>it\,o\:aU\(\;Z\>pW\&T7oP\'2K\^E\:x9\'c\[\%z\-\,64JQ5AeH_G\#KijUKghQw\^\\vea3a\?kka_G\$8\#\`\*kynsxzBLru\'\]k_\[7FrVx\}\^\=\$blx\>s\-N\%j\;D\*aZDnsw\:YKZ\%Q\.Kne9\#hP\?\+b3\(SOvL\,\^\;\&u5\@\?5C5Bhb\=m\-vEh_L15Jl\]U\)0RP6\{q\%L\^_z5E\'Dw6X\b|DM
------------------------------------------------------------------
  0 812 Bra 0
  3     $<.X+ix[d1b!H#?vV0vrK:ZH1=2M>iV;?aPhFB<*vW@QW@sO9}cfZA-i'w%hKd6gt1UJP,15_#QY$M^Mss_U/]&LK9[5vQub^w[KDD<EjmhUZ?.akp2dF>qmj;2}YWFdYx.Ap]hjCPTP(n28k+3;o&WXqs/gOXdr$:r'do0;b4c(f_Gr="\4)[01T7ajQJvL$W~mL_sS/4h:x*[ZN=KLs&L5zX//>it,o:aU(;Z>pW&T7oP'2K^E:x9'c[%z-,64JQ5AeH_G#KijUKghQw^\vea3a?kka_G$8#`*kynsxzBLru']k_[7FrVx}^=$blx>s-N%j;D*aZDnsw:YKZ%Q.Kne9#hP?+b3(SOvL,^;&u5@?5C5Bhb=m-vEh_L15Jl]U)0RP6{q%L^_z5E'Dw6X
811     \b
812 812 Ket
815     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = '$'
Need char = 'X'

/(.*)\d+\1/I
Capturing subpattern count = 1
Max back reference = 1
Partial matching not supported
No options
No first char
No need char

/(.*)\d+/I
Capturing subpattern count = 1
Partial matching not supported
No options
First char at start or follows \n
No need char
    
/(.*)\d+\1/Is
Capturing subpattern count = 1
Max back reference = 1
Partial matching not supported
Options: dotall
No first char
No need char

/(.*)\d+/Is
Capturing subpattern count = 1
Partial matching not supported
Options: anchored dotall
No first char
No need char

/(.*(xyz))\d+\2/I
Capturing subpattern count = 2
Max back reference = 2
Partial matching not supported
No options
First char at start or follows \n
Need char = 'z'

/((.*))\d+\1/I
Capturing subpattern count = 2
Max back reference = 1
Partial matching not supported
No options
No first char
No need char
    abc123bc
 0: bc123bc
 1: bc
 2: bc
    
/a[b]/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'b'

/(?=a).*/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'a'
No need char

/(?=abc).xyz/iI
Capturing subpattern count = 0
Options: caseless
First char = 'a' (caseless)
Need char = 'z' (caseless)

/(?=abc)(?i).xyz/I
Capturing subpattern count = 0
No options
Case state changes
First char = 'a'
Need char = 'z' (caseless)

/(?=a)(?=b)/I
Capturing subpattern count = 0
No options
First char = 'a'
No need char

/(?=.)a/I
Capturing subpattern count = 0
No options
First char = 'a'
No need char

/((?=abcda)a)/I
Capturing subpattern count = 1
No options
First char = 'a'
Need char = 'a'

/((?=abcda)ab)/I
Capturing subpattern count = 1
No options
First char = 'a'
Need char = 'b'

/()a/I
Capturing subpattern count = 1
No options
No first char
Need char = 'a'

/(?(1)ab|ac)/I
Capturing subpattern count = 0
No options
First char = 'a'
No need char

/(?(1)abz|acz)/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'z'

/(?(1)abz)/I
Capturing subpattern count = 0
No options
No first char
No need char

/(?(1)abz)123/I
Capturing subpattern count = 0
No options
No first char
Need char = '3'

/(a)+/I
Capturing subpattern count = 1
No options
First char = 'a'
No need char

/(a){2,3}/I
Capturing subpattern count = 1
No options
First char = 'a'
Need char = 'a'

/(a)*/I
Capturing subpattern count = 1
No options
No first char
No need char

/[a]/I
Capturing subpattern count = 0
No options
First char = 'a'
No need char

/[ab]/I
Capturing subpattern count = 0
No options
No first char
No need char

/[ab]/IS
Capturing subpattern count = 0
No options
No first char
No need char
Starting byte set: a b 

/[^a]/I
Capturing subpattern count = 0
No options
No first char
No need char

/\d456/I
Capturing subpattern count = 0
No options
No first char
Need char = '6'

/\d456/IS
Capturing subpattern count = 0
No options
No first char
Need char = '6'
Starting byte set: 0 1 2 3 4 5 6 7 8 9 

/a^b/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'b'

/^a/mI
Capturing subpattern count = 0
Options: multiline
First char at start or follows \n
Need char = 'a'
  abcde
 0: a
  xy\nabc 
 0: a
  *** Failers 
No match
  xyabc 
No match

/c|abc/I
Capturing subpattern count = 0
No options
No first char
Need char = 'c'

/(?i)[ab]/IS
Capturing subpattern count = 0
Options: caseless
No first char
No need char
Starting byte set: A B a b 

/[ab](?i)cd/IS
Capturing subpattern count = 0
No options
Case state changes
No first char
Need char = 'd' (caseless)
Starting byte set: a b 

/abc(?C)def/
    abcdef
 0: abcdef
    1234abcdef 
 0: abcdef
    *** Failers
No match
    abcxyz
No match
    abcxyzf   
No match

/abc(?C)de(?C1)f/
    123abcdef
 0: abcdef
    
/(?C1)\dabc(?C2)def/ 
    1234abcdef
 0: 4abcdef
    *** Failers
No match
    abcdef 
No match
    
/(?C255)ab/

/(?C256)ab/
Failed: number after (?C is > 255 at offset 6

/(?Cab)xx/ 
Failed: closing ) for (?C expected at offset 3

/(?C12vr)x/
Failed: closing ) for (?C expected at offset 5

/abc(?C)def/
    *** Failers
No match
    \x83\x0\x61bcdef
 0: abcdef

/(abc)(?C)de(?C1)f/
    123abcdef
 0: abcdef
 1: abc
    123abcdef\C+ 
 0: abcdef
 1: abc
    123abcdef\C- 
 0: abcdef
 1: abc
    *** Failers
No match
    123abcdef\C!1 
 0: abcdef
 1: abc
    
/(?C0)(abc(?C1))*/
    abcabcabc
 0: abcabcabc
 1: abc
    abcabc\C!1!3   
 0: abcabc
 1: abc
    *** Failers
 0: 
    abcabcabc\C!1!3   
 0: abcabcabc
 1: abc

/(\d{3}(?C))*/
    123\C+
 0: 123
 1: 123
    123456\C+
 0: 123456
 1: 456
    123456789\C+  
 0: 123456789
 1: 789

/((xyz)(?C)p|(?C1)xyzabc)/
    xyzabc\C+
 0: xyzabc
 1: xyzabc

/(X)((xyz)(?C)p|(?C1)xyzabc)/
    Xxyzabc\C+
 0: Xxyzabc
 1: X
 2: xyzabc

/(?=(abc))(?C)abcdef/
    abcdef\C+
 0: abcdef
 1: abc
    
/(?!(abc)(?C1)d)(?C2)abcxyz/
    abcxyz\C+ 
 0: abcxyz

/(?<=(abc)(?C))xyz/
   abcxyz\C+
 0: xyz
 1: abc
   
/(?C)abc/ 

/(?C)^abc/

/(?C)a|b/S

/(?R)/
Failed: recursive call could loop indefinitely at offset 3

/(a|(?R))/
Failed: recursive call could loop indefinitely at offset 6

/(ab|(bc|(de|(?R))))/
Failed: recursive call could loop indefinitely at offset 15

/x(ab|(bc|(de|(?R))))/
    xab
 0: xab
 1: ab
    xbc
 0: xbc
 1: bc
 2: bc
    xde
 0: xde
 1: de
 2: de
 3: de
    xxab
 0: xxab
 1: xab
 2: xab
 3: xab
    xxxab
 0: xxxab
 1: xxab
 2: xxab
 3: xxab
    *** Failers
No match
    xyab   
No match

/(ab|(bc|(de|(?1))))/
Failed: recursive call could loop indefinitely at offset 15

/x(ab|(bc|(de|(?1)x)x)x)/
Failed: recursive call could loop indefinitely at offset 16

/^([^()]|\((?1)*\))*$/
    abc
 0: abc
 1: c
    a(b)c
 0: a(b)c
 1: c
    a(b(c))d  
 0: a(b(c))d
 1: d
    *** Failers)
No match
    a(b(c)d  
No match

/^>abc>([^()]|\((?1)*\))*<xyz<$/
   >abc>123<xyz<
 0: >abc>123<xyz<
 1: 3
   >abc>1(2)3<xyz<
 0: >abc>1(2)3<xyz<
 1: 3
   >abc>(1(2)3)<xyz<
 0: >abc>(1(2)3)<xyz<
 1: (1(2)3)

/(a(?1)b)/D
------------------------------------------------------------------
  0  16 Bra 0
  3  10 Bra 1
  6     a
  8   3 Recurse
 11     b
 13  10 Ket
 16  16 Ket
 19     End
------------------------------------------------------------------
Capturing subpattern count = 1
No options
First char = 'a'
Need char = 'b'

/(a(?1)+b)/D
------------------------------------------------------------------
  0  22 Bra 0
  3  16 Bra 1
  6     a
  8   6 Bra 0
 11   3 Recurse
 14   6 KetRmax
 17     b
 19  16 Ket
 22  22 Ket
 25     End
------------------------------------------------------------------
Capturing subpattern count = 1
No options
First char = 'a'
Need char = 'b'

/^\W*(?:((.)\W*(?1)\W*\2|)|((.)\W*(?3)\W*\4|\W*.\W*))\W*$/i
    1221
 0: 1221
 1: 1221
 2: 1
    Satan, oscillate my metallic sonatas!
 0: Satan, oscillate my metallic sonatas!
 1: <unset>
 2: <unset>
 3: Satan, oscillate my metallic sonatas
 4: S
    A man, a plan, a canal: Panama!
 0: A man, a plan, a canal: Panama!
 1: <unset>
 2: <unset>
 3: A man, a plan, a canal: Panama
 4: A
    Able was I ere I saw Elba. 
 0: Able was I ere I saw Elba.
 1: <unset>
 2: <unset>
 3: Able was I ere I saw Elba
 4: A
    *** Failers
No match
    The quick brown fox  
No match
    
/^(\d+|\((?1)([+*-])(?1)\)|-(?1))$/
    12
 0: 12
 1: 12
    (((2+2)*-3)-7)
 0: (((2+2)*-3)-7)
 1: (((2+2)*-3)-7)
 2: -
    -12
 0: -12
 1: -12
    *** Failers
No match
    ((2+2)*-3)-7)
No match
         
/^(x(y|(?1){2})z)/
    xyz
 0: xyz
 1: xyz
 2: y
    xxyzxyzz 
 0: xxyzxyzz
 1: xxyzxyzz
 2: xyzxyz
    *** Failers
No match
    xxyzz
No match
    xxyzxyzxyzz   
No match

/((< (?: (?(R) \d++  | [^<>]*+) | (?2)) * >))/x
    <>
 0: <>
 1: <>
 2: <>
    <abcd>
 0: <abcd>
 1: <abcd>
 2: <abcd>
    <abc <123> hij>
 0: <abc <123> hij>
 1: <abc <123> hij>
 2: <abc <123> hij>
    <abc <def> hij>
 0: <def>
 1: <def>
 2: <def>
    <abc<>def> 
 0: <abc<>def>
 1: <abc<>def>
 2: <abc<>def>
    <abc<>      
 0: <>
 1: <>
 2: <>
    *** Failers
No match
    <abc
No match

/(?1)/
Failed: reference to non-existent subpattern at offset 3

/((?2)(abc)/
Failed: reference to non-existent subpattern at offset 4

/^(abc)def(?1)/
    abcdefabc
 0: abcdefabc
 1: abc

/^(a|b|c)=(?1)+/
    a=a
 0: a=a
 1: a
    a=b
 0: a=b
 1: a
    a=bc  
 0: a=bc
 1: a

/^(a|b|c)=((?1))+/
    a=a
 0: a=a
 1: a
 2: a
    a=b
 0: a=b
 1: a
 2: b
    a=bc  
 0: a=bc
 1: a
 2: c

/a(?P<name1>b|c)d(?P<longername2>e)/D
------------------------------------------------------------------
  0  28 Bra 0
  3     a
  5   5 Bra 1
  8     b
 10   5 Alt
 13     c
 15  10 Ket
 18     d
 20   5 Bra 2
 23     e
 25   5 Ket
 28  28 Ket
 31     End
------------------------------------------------------------------
Capturing subpattern count = 2
Named capturing subpatterns:
  longername2   2
  name1         1
No options
First char = 'a'
Need char = 'e'
    abde
 0: abde
 1: b
 2: e
    acde 
 0: acde
 1: c
 2: e

/(?:a(?P<c>c(?P<d>d)))(?P<a>a)/D
------------------------------------------------------------------
  0  35 Bra 0
  3  21 Bra 0
  6     a
  8  13 Bra 1
 11     c
 13   5 Bra 2
 16     d
 18   5 Ket
 21  13 Ket
 24  21 Ket
 27   5 Bra 3
 30     a
 32   5 Ket
 35  35 Ket
 38     End
------------------------------------------------------------------
Capturing subpattern count = 3
Named capturing subpatterns:
  a   3
  c   1
  d   2
No options
First char = 'a'
Need char = 'a'

/(?P<a>a)...(?P=a)bbb(?P>a)d/D
------------------------------------------------------------------
  0  28 Bra 0
  3   5 Bra 1
  6     a
  8   5 Ket
 11     Any
 12     Any
 13     Any
 14     \1
 17     bbb
 23   3 Recurse
 26     d
 28  28 Ket
 31     End
------------------------------------------------------------------
Capturing subpattern count = 1
Max back reference = 1
Named capturing subpatterns:
  a   1
No options
First char = 'a'
Need char = 'd'

/^\W*(?:(?P<one>(?P<two>.)\W*(?P>one)\W*(?P=two)|)|(?P<three>(?P<four>.)\W*(?P>three)\W*(?P=four)|\W*.\W*))\W*$/i
    1221
 0: 1221
 1: 1221
 2: 1
    Satan, oscillate my metallic sonatas!
 0: Satan, oscillate my metallic sonatas!
 1: <unset>
 2: <unset>
 3: Satan, oscillate my metallic sonatas
 4: S
    A man, a plan, a canal: Panama!
 0: A man, a plan, a canal: Panama!
 1: <unset>
 2: <unset>
 3: A man, a plan, a canal: Panama
 4: A
    Able was I ere I saw Elba. 
 0: Able was I ere I saw Elba.
 1: <unset>
 2: <unset>
 3: Able was I ere I saw Elba
 4: A
    *** Failers
No match
    The quick brown fox  
No match
    
/((?(R)a|b))\1(?1)?/
  bb
 0: bb
 1: b
  bbaa 
 0: bba
 1: b

/(.*)a/sI
Capturing subpattern count = 1
Partial matching not supported
Options: anchored dotall
No first char
Need char = 'a'

/(.*)a\1/sI
Capturing subpattern count = 1
Max back reference = 1
Partial matching not supported
Options: dotall
No first char
Need char = 'a'

/(.*)a(b)\2/sI
Capturing subpattern count = 2
Max back reference = 2
Partial matching not supported
Options: anchored dotall
No first char
Need char = 'b'

/((.*)a|(.*)b)z/sI
Capturing subpattern count = 3
Partial matching not supported
Options: anchored dotall
No first char
Need char = 'z'

/((.*)a|(.*)b)z\1/sI
Capturing subpattern count = 3
Max back reference = 1
Partial matching not supported
Options: dotall
No first char
Need char = 'z'

/((.*)a|(.*)b)z\2/sI
Capturing subpattern count = 3
Max back reference = 2
Partial matching not supported
Options: dotall
No first char
Need char = 'z'

/((.*)a|(.*)b)z\3/sI
Capturing subpattern count = 3
Max back reference = 3
Partial matching not supported
Options: dotall
No first char
Need char = 'z'

/((.*)a|^(.*)b)z\3/sI
Capturing subpattern count = 3
Max back reference = 3
Partial matching not supported
Options: anchored dotall
No first char
Need char = 'z'

/(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)a/sI
Capturing subpattern count = 31
Partial matching not supported
Options: anchored dotall
No first char
No need char

/(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)a\31/sI
Capturing subpattern count = 31
Max back reference = 31
Partial matching not supported
Options: dotall
No first char
No need char

/(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)a\32/sI
Capturing subpattern count = 32
Max back reference = 32
Partial matching not supported
Options: dotall
No first char
No need char

/(a)(bc)/ND
------------------------------------------------------------------
  0  21 Bra 0
  3   5 Bra 0
  6     a
  8   5 Ket
 11   7 Bra 0
 14     bc
 18   7 Ket
 21  21 Ket
 24     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options:
First char = 'a'
Need char = 'c'
  abc
 0: abc

/(?P<one>a)(bc)/ND
------------------------------------------------------------------
  0  21 Bra 0
  3   5 Bra 1
  6     a
  8   5 Ket
 11   7 Bra 0
 14     bc
 18   7 Ket
 21  21 Ket
 24     End
------------------------------------------------------------------
Capturing subpattern count = 1
Named capturing subpatterns:
  one   1
Options:
First char = 'a'
Need char = 'c'
  abc
 0: abc
 1: a

/(a)(?P<named>bc)/ND
------------------------------------------------------------------
  0  21 Bra 0
  3   5 Bra 0
  6     a
  8   5 Ket
 11   7 Bra 1
 14     bc
 18   7 Ket
 21  21 Ket
 24     End
------------------------------------------------------------------
Capturing subpattern count = 1
Named capturing subpatterns:
  named   1
Options:
First char = 'a'
Need char = 'c'

/(a+)*zz/
  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaazzbbbbbb\M
Minimum match limit = 8
 0: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaazz
 1: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
  aaaaaaaaaaaaaz\M
Minimum match limit = 32768
No match

/(aaa(?C1)bbb|ab)/
   aaabbb
 0: aaabbb
 1: aaabbb
   aaabbb\C*0
 0: aaabbb
 1: aaabbb
   aaabbb\C*1
 0: aaabbb
 1: aaabbb
   aaabbb\C*-1
 0: aaabbb
 1: aaabbb

/ab(?P<one>cd)ef(?P<two>gh)/
    abcdefgh
 0: abcdefgh
 1: cd
 2: gh
    abcdefgh\C1\Gtwo
 0: abcdefgh
 1: cd
 2: gh
 1C cd (2)
 2G gh (2)
    abcdefgh\Cone\Ctwo
 0: abcdefgh
 1: cd
 2: gh
 1C cd (2)
 2C gh (2)
    abcdefgh\Cthree  
no parentheses with name "three"
 0: abcdefgh
 1: cd
 2: gh

/(?P<Tes>)(?P<Test>)/D
------------------------------------------------------------------
  0  15 Bra 0
  3   3 Bra 1
  6   3 Ket
  9   3 Bra 2
 12   3 Ket
 15  15 Ket
 18     End
------------------------------------------------------------------
Capturing subpattern count = 2
Named capturing subpatterns:
  Tes    1
  Test   2
No options
No first char
No need char

/(?P<Test>)(?P<Tes>)/D
------------------------------------------------------------------
  0  15 Bra 0
  3   3 Bra 1
  6   3 Ket
  9   3 Bra 2
 12   3 Ket
 15  15 Ket
 18     End
------------------------------------------------------------------
Capturing subpattern count = 2
Named capturing subpatterns:
  Tes    2
  Test   1
No options
No first char
No need char

/(?P<Z>zz)(?P<A>aa)/
    zzaa\CZ
 0: zzaa
 1: zz
 2: aa
 1C zz (2)
    zzaa\CA
 0: zzaa
 1: zz
 2: aa
 2C aa (2)

/(?P<x>eks)(?P<x>eccs)/
Failed: two named groups have the same name at offset 16

/(?P<abc>abc(?P<def>def)(?P<abc>xyz))/
Failed: two named groups have the same name at offset 31

"\[((?P<elem>\d+)(,(?P>elem))*)\]"
    [10,20,30,5,5,4,4,2,43,23,4234]
 0: [10,20,30,5,5,4,4,2,43,23,4234]
 1: 10,20,30,5,5,4,4,2,43,23,4234
 2: 10
 3: ,4234
    *** Failers
No match
    []  
No match

"\[((?P<elem>\d+)(,(?P>elem))*)?\]"
    [10,20,30,5,5,4,4,2,43,23,4234]
 0: [10,20,30,5,5,4,4,2,43,23,4234]
 1: 10,20,30,5,5,4,4,2,43,23,4234
 2: 10
 3: ,4234
    [] 
 0: []

/(a(b(?2)c))?/D
------------------------------------------------------------------
  0  25 Bra 0
  3     Brazero
  4  18 Bra 1
  7     a
  9  10 Bra 2
 12     b
 14   9 Recurse
 17     c
 19  10 Ket
 22  18 Ket
 25  25 Ket
 28     End
------------------------------------------------------------------
Capturing subpattern count = 2
No options
No first char
No need char

/(a(b(?2)c))*/D
------------------------------------------------------------------
  0  25 Bra 0
  3     Brazero
  4  18 Bra 1
  7     a
  9  10 Bra 2
 12     b
 14   9 Recurse
 17     c
 19  10 Ket
 22  18 KetRmax
 25  25 Ket
 28     End
------------------------------------------------------------------
Capturing subpattern count = 2
No options
No first char
No need char

/(a(b(?2)c)){0,2}/D
------------------------------------------------------------------
  0  53 Bra 0
  3     Brazero
  4  46 Bra 0
  7  18 Bra 1
 10     a
 12  10 Bra 2
 15     b
 17  12 Recurse
 20     c
 22  10 Ket
 25  18 Ket
 28     Brazero
 29  18 Bra 1
 32     a
 34  10 Bra 2
 37     b
 39  12 Recurse
 42     c
 44  10 Ket
 47  18 Ket
 50  46 Ket
 53  53 Ket
 56     End
------------------------------------------------------------------
Capturing subpattern count = 2
No options
No first char
No need char

/[ab]{1}+/D
------------------------------------------------------------------
  0  47 Bra 0
  3  41 Once
  6     [ab]{1,1}
 44  41 Ket
 47  47 Ket
 50     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
No first char
No need char

/((w\/|-|with)*(free|immediate)*.*?shipping\s*[!.-]*)/i
     Baby Bjorn Active Carrier - With free SHIPPING!!
 0: Baby Bjorn Active Carrier - With free SHIPPING!!
 1: Baby Bjorn Active Carrier - With free SHIPPING!!

/((w\/|-|with)*(free|immediate)*.*?shipping\s*[!.-]*)/iS
     Baby Bjorn Active Carrier - With free SHIPPING!!
 0: Baby Bjorn Active Carrier - With free SHIPPING!!
 1: Baby Bjorn Active Carrier - With free SHIPPING!!
     
/a*.*b/SD
------------------------------------------------------------------
  0   9 Bra 0
  3     a*
  5     Any*
  7     b
  9   9 Ket
 12     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
Need char = 'b'
Study returned NULL

/(a|b)*.?c/SD 
------------------------------------------------------------------
  0  21 Bra 0
  3     Brazero
  4   5 Bra 1
  7     a
  9   5 Alt
 12     b
 14  10 KetRmax
 17     Any?
 19     c
 21  21 Ket
 24     End
------------------------------------------------------------------
Capturing subpattern count = 1
No options
No first char
Need char = 'c'
Study returned NULL

/abc(?C255)de(?C)f/D
------------------------------------------------------------------
  0  27 Bra 0
  3     abc
  9     Callout 255 10 1
 15     de
 19     Callout 0 16 1
 25     f
 27  27 Ket
 30     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'f'

/abcde/CD
------------------------------------------------------------------
  0  49 Bra 0
  3     Callout 255 0 1
  9     a
 11     Callout 255 1 1
 17     b
 19     Callout 255 2 1
 25     c
 27     Callout 255 3 1
 33     d
 35     Callout 255 4 1
 41     e
 43     Callout 255 5 0
 49  49 Ket
 52     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options:
First char = 'a'
Need char = 'e'
  abcde
 0: abcde
  abcdfe 
No match
  
/a*b/CD
------------------------------------------------------------------
  0  25 Bra 0
  3     Callout 255 0 2
  9     a*
 11     Callout 255 2 1
 17     b
 19     Callout 255 3 0
 25  25 Ket
 28     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
Options:
No first char
Need char = 'b'
  ab
 0: ab
  aaaab
 0: aaaab
  aaaacb   
 0: b

/a+b/CD
------------------------------------------------------------------
  0  25 Bra 0
  3     Callout 255 0 2
  9     a+
 11     Callout 255 2 1
 17     b
 19     Callout 255 3 0
 25  25 Ket
 28     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
Options:
First char = 'a'
Need char = 'b'
  ab
 0: ab
  aaaab
 0: aaaab
  aaaacb   
No match

/(abc|def)x/CD
------------------------------------------------------------------
  0  92 Bra 0
  3     Callout 255 0 9
  9  33 Bra 1
 12     Callout 255 1 1
 18     a
 20     Callout 255 2 1
 26     b
 28     Callout 255 3 1
 34     c
 36     Callout 255 4 0
 42  33 Alt
 45     Callout 255 5 1
 51     d
 53     Callout 255 6 1
 59     e
 61     Callout 255 7 1
 67     f
 69     Callout 255 8 0
 75  66 Ket
 78     Callout 255 9 1
 84     x
 86     Callout 255 10 0
 92  92 Ket
 95     End
------------------------------------------------------------------
Capturing subpattern count = 1
Options:
No first char
Need char = 'x'
  abcx
 0: abcx
 1: abc
  defx
 0: defx
 1: def
  abcdefzx
No match

/(ab|cd){3,4}/C
  ababab
 0: ababab
 1: ab
  abcdabcd
 0: abcdabcd
 1: cd
  abcdcdcdcdcd  
 0: abcdcdcd
 1: cd

/([ab]{,4}c|xy)/CD
------------------------------------------------------------------
  0 131 Bra 0
  3     Callout 255 0 14
  9  88 Bra 1
 12     Callout 255 1 4
 18     [ab]
 51     Callout 255 5 1
 57     {
 59     Callout 255 6 1
 65     ,
 67     Callout 255 7 1
 73     4
 75     Callout 255 8 1
 81     }
 83     Callout 255 9 1
 89     c
 91     Callout 255 10 0
 97  25 Alt
100     Callout 255 11 1
106     x
108     Callout 255 12 1
114     y
116     Callout 255 13 0
122 113 Ket
125     Callout 255 14 0
131 131 Ket
134     End
------------------------------------------------------------------
Capturing subpattern count = 1
Options:
No first char
No need char
    Note: that { does NOT introduce a quantifier
No match

/([ab]{1,4}c|xy){4,5}?123/CD
------------------------------------------------------------------
  0 485 Bra 0
  3     Callout 255 0 21
  9  61 Bra 1
 12     Callout 255 1 9
 18     [ab]{1,4}
 56     Callout 255 10 1
 62     c
 64     Callout 255 11 0
 70  25 Alt
 73     Callout 255 12 1
 79     x
 81     Callout 255 13 1
 87     y
 89     Callout 255 14 0
 95  86 Ket
 98  61 Bra 1
101     Callout 255 1 9
107     [ab]{1,4}
145     Callout 255 10 1
151     c
153     Callout 255 11 0
159  25 Alt
162     Callout 255 12 1
168     x
170     Callout 255 13 1
176     y
178     Callout 255 14 0
184  86 Ket
187  61 Bra 1
190     Callout 255 1 9
196     [ab]{1,4}
234     Callout 255 10 1
240     c
242     Callout 255 11 0
248  25 Alt
251     Callout 255 12 1
257     x
259     Callout 255 13 1
265     y
267     Callout 255 14 0
273  86 Ket
276  61 Bra 1
279     Callout 255 1 9
285     [ab]{1,4}
323     Callout 255 10 1
329     c
331     Callout 255 11 0
337  25 Alt
340     Callout 255 12 1
346     x
348     Callout 255 13 1
354     y
356     Callout 255 14 0
362  86 Ket
365     Braminzero
366  61 Bra 1
369     Callout 255 1 9
375     [ab]{1,4}
413     Callout 255 10 1
419     c
421     Callout 255 11 0
427  25 Alt
430     Callout 255 12 1
436     x
438     Callout 255 13 1
444     y
446     Callout 255 14 0
452  86 Ket
455     Callout 255 21 1
461     1
463     Callout 255 22 1
469     2
471     Callout 255 23 1
477     3
479     Callout 255 24 0
485 485 Ket
488     End
------------------------------------------------------------------
Capturing subpattern count = 1
Partial matching not supported
Options:
No first char
Need char = '3'
    aacaacaacaacaac123
 0: aacaacaacaacaac123
 1: aac

/\b.*/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
No need char
  ab cd\>1
 0:  cd
  
/\b.*/Is 
Capturing subpattern count = 0
Partial matching not supported
Options: dotall
No first char
No need char
  ab cd\>1
 0:  cd
  
/(?!.bcd).*/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
No need char
  Xbcd12345 
 0: bcd12345

/abcde/
    ab\P
Partial match
    abc\P
Partial match
    abcd\P
Partial match
    abcde\P   
 0: abcde
    the quick brown abc\P
Partial match
    ** Failers\P
No match
    the quick brown abxyz fox\P
No match
    
"^(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/(20)?\d\d$"
    13/05/04\P
 0: 13/05/04
 1: 13
 2: 05
    13/5/2004\P
 0: 13/5/2004
 1: 13
 2: 5
 3: 20
    02/05/09\P 
 0: 02/05/09
 1: 02
 2: 05
    1\P
Partial match
    1/2\P
Partial match
    1/2/0\P
Partial match
    1/2/04\P    
 0: 1/2/04
 1: 1
 2: 2
    0\P
Partial match
    02/\P
Partial match
    02/0\P   
Partial match
    02/1\P
Partial match
    ** Failers\P
No match
    \P
No match
    123\P
No match
    33/4/04\P
No match
    3/13/04\P
No match
    0/1/2003\P
No match
    0/\P 
No match
    02/0/\P 
No match
    02/13\P  
No match

/0{0,2}ABC/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
Need char = 'C'
    
/\d{3,}ABC/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
Need char = 'C'
    
/\d*ABC/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
Need char = 'C'

/[abc]+DE/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
Need char = 'E'

/[abc]?123/
    123\P
 0: 123
    a\P
Partial match
    b\P
Partial match
    c\P
Partial match
    c12\P
Partial match
    c123\P      
 0: c123

/^(?:\d){3,5}X/
    1\P
Partial match
    123\P
Partial match
    123X
 0: 123X
    1234\P
Partial match
    1234X
 0: 1234X
    12345\P
Partial match
    12345X      
 0: 12345X
    *** Failers 
No match
    1X 
No match
    123456\P 
No match

/abc/>testsavedregex
Compiled regex written to testsavedregex
<testsavedregex
Compiled regex loaded from testsavedregex
No study data
    abc
 0: abc
    ** Failers
No match
    bca
No match
    
/abc/>testsavedregex
Compiled regex written to testsavedregex
<testsavedregex
Compiled regex loaded from testsavedregex
No study data
    abc
 0: abc
    ** Failers
No match
    bca
No match

/(a|b)/S>testsavedregex
Compiled regex written to testsavedregex
Study data written to testsavedregex
<testsavedregex
Compiled regex loaded from testsavedregex
Study data loaded from testsavedregex
    abc
 0: a
 1: a
    ** Failers
 0: a
 1: a
    def  
No match
    
/(a|b)/SF>testsavedregex
Compiled regex written to testsavedregex
Study data written to testsavedregex
<testsavedregex
Compiled regex (byte-inverted) loaded from testsavedregex
Study data loaded from testsavedregex
    abc
 0: a
 1: a
    ** Failers
 0: a
 1: a
    def  
No match
    
~<(\w+)/?>(.)*</(\1)>~smg
    <!DOCTYPE seite SYSTEM "http://www.lco.lineas.de/xmlCms.dtd">\n<seite>\n<dokumenteninformation>\n<seitentitel>Partner der LCO</seitentitel>\n<sprache>de</sprache>\n<seitenbeschreibung>Partner der LINEAS Consulting\nGmbH</seitenbeschreibung>\n<schluesselworte>LINEAS Consulting GmbH Hamburg\nPartnerfirmen</schluesselworte>\n<revisit>30 days</revisit>\n<robots>index,follow</robots>\n<menueinformation>\n<aktiv>ja</aktiv>\n<menueposition>3</menueposition>\n<menuetext>Partner</menuetext>\n</menueinformation>\n<lastedited>\n<autor>LCO</autor>\n<firma>LINEAS Consulting</firma>\n<datum>15.10.2003</datum>\n</lastedited>\n</dokumenteninformation>\n<inhalt>\n\n<absatzueberschrift>Die Partnerfirmen der LINEAS Consulting\nGmbH</absatzueberschrift>\n\n<absatz><link ziel="http://www.ca.com/" zielfenster="_blank">\n<bild name="logo_ca.gif" rahmen="no"/></link> <link\nziel="http://www.ey.com/" zielfenster="_blank"><bild\nname="logo_euy.gif" rahmen="no"/></link>\n</absatz>\n\n<absatz><link ziel="http://www.cisco.de/" zielfenster="_blank">\n<bild name="logo_cisco.gif" rahmen="ja"/></link></absatz>\n\n<absatz><link ziel="http://www.atelion.de/"\nzielfenster="_blank"><bild\nname="logo_atelion.gif" rahmen="no"/></link>\n</absatz>\n\n<absatz><link ziel="http://www.line-information.de/"\nzielfenster="_blank">\n<bild name="logo_line_information.gif" rahmen="no"/></link>\n</absatz>\n\n<absatz><bild name="logo_aw.gif" rahmen="no"/></absatz>\n\n<absatz><link ziel="http://www.incognis.de/"\nzielfenster="_blank"><bild\nname="logo_incognis.gif" rahmen="no"/></link></absatz>\n\n<absatz><link ziel="http://www.addcraft.com/"\nzielfenster="_blank"><bild\nname="logo_addcraft.gif" rahmen="no"/></link></absatz>\n\n<absatz><link ziel="http://www.comendo.com/"\nzielfenster="_blank"><bild\nname="logo_comendo.gif" rahmen="no"/></link></absatz>\n\n</inhalt>\n</seite>
 0: <seite>\x0a<dokumenteninformation>\x0a<seitentitel>Partner der LCO</seitentitel>\x0a<sprache>de</sprache>\x0a<seitenbeschreibung>Partner der LINEAS Consulting\x0aGmbH</seitenbeschreibung>\x0a<schluesselworte>LINEAS Consulting GmbH Hamburg\x0aPartnerfirmen</schluesselworte>\x0a<revisit>30 days</revisit>\x0a<robots>index,follow</robots>\x0a<menueinformation>\x0a<aktiv>ja</aktiv>\x0a<menueposition>3</menueposition>\x0a<menuetext>Partner</menuetext>\x0a</menueinformation>\x0a<lastedited>\x0a<autor>LCO</autor>\x0a<firma>LINEAS Consulting</firma>\x0a<datum>15.10.2003</datum>\x0a</lastedited>\x0a</dokumenteninformation>\x0a<inhalt>\x0a\x0a<absatzueberschrift>Die Partnerfirmen der LINEAS Consulting\x0aGmbH</absatzueberschrift>\x0a\x0a<absatz><link ziel="http://www.ca.com/" zielfenster="_blank">\x0a<bild name="logo_ca.gif" rahmen="no"/></link> <link\x0aziel="http://www.ey.com/" zielfenster="_blank"><bild\x0aname="logo_euy.gif" rahmen="no"/></link>\x0a</absatz>\x0a\x0a<absatz><link ziel="http://www.cisco.de/" zielfenster="_blank">\x0a<bild name="logo_cisco.gif" rahmen="ja"/></link></absatz>\x0a\x0a<absatz><link ziel="http://www.atelion.de/"\x0azielfenster="_blank"><bild\x0aname="logo_atelion.gif" rahmen="no"/></link>\x0a</absatz>\x0a\x0a<absatz><link ziel="http://www.line-information.de/"\x0azielfenster="_blank">\x0a<bild name="logo_line_information.gif" rahmen="no"/></link>\x0a</absatz>\x0a\x0a<absatz><bild name="logo_aw.gif" rahmen="no"/></absatz>\x0a\x0a<absatz><link ziel="http://www.incognis.de/"\x0azielfenster="_blank"><bild\x0aname="logo_incognis.gif" rahmen="no"/></link></absatz>\x0a\x0a<absatz><link ziel="http://www.addcraft.com/"\x0azielfenster="_blank"><bild\x0aname="logo_addcraft.gif" rahmen="no"/></link></absatz>\x0a\x0a<absatz><link ziel="http://www.comendo.com/"\x0azielfenster="_blank"><bild\x0aname="logo_comendo.gif" rahmen="no"/></link></absatz>\x0a\x0a</inhalt>\x0a</seite>
 1: seite
 2: \x0a
 3: seite

/^a/IF
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/ End of testinput2 /
