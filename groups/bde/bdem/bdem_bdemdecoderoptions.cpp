// bdem_bdemdecoderoptions.cpp   -*-C++-*-

#ifndef lint
static char RCSid_bdem_bdemdecoderoptions_cpp[] = "$Id: $";
#endif

#include <bdem_bdemdecoderoptions.h>

#include <bdeat_formattingmode.h>

#include <bsls_assert.h>
#include <bdeu_chartype.h>
#include <bdeu_print.h>
#include <bdeu_printmethods.h>
#include <bdeu_string.h>

#include <bsl_ostream.h>
#include <bsl_iomanip.h>

namespace BloombergLP {

                    // -----------------------------------                     
                    // class bdem_BdemDecoderOptions                     
                    // -----------------------------------                     

// CONSTANTS

const char bdem_BdemDecoderOptions::CLASS_NAME[] = "bdem_BdemDecoderOptions";
    // the name of this class
const int bdem_BdemDecoderOptions::DEFAULT_BDEM_VERSION = 2;
    // default value of 'BdemVersion' attribute
const int bdem_BdemDecoderOptions::DEFAULT_MAX_DEPTH = 32;
    // default value of 'MaxDepth' attribute

const bdeat_AttributeInfo bdem_BdemDecoderOptions::ATTRIBUTE_INFO_ARRAY[] = {
    {
        ATTRIBUTE_ID_BDEM_VERSION,
        "BdemVersion",             // name
        sizeof("BdemVersion") - 1, // name length
        "BDEM version",  // annotation
        bdeat_FormattingMode::BDEAT_DEC // formatting mode
    },
    {
        ATTRIBUTE_ID_MAX_DEPTH,
        "MaxDepth",             // name
        sizeof("MaxDepth") - 1, // name length
        "maximum recursion depth",  // annotation
        bdeat_FormattingMode::BDEAT_DEC // formatting mode
    }
};

// CLASS METHODS

const bdeat_AttributeInfo *bdem_BdemDecoderOptions::lookupAttributeInfo(
        const char *name,
        int         nameLength)
{
    switch(nameLength) {
        case 8: {
            if (bdeu_CharType::toUpper(name[0])=='M'
             && bdeu_CharType::toUpper(name[1])=='A'
             && bdeu_CharType::toUpper(name[2])=='X'
             && bdeu_CharType::toUpper(name[3])=='D'
             && bdeu_CharType::toUpper(name[4])=='E'
             && bdeu_CharType::toUpper(name[5])=='P'
             && bdeu_CharType::toUpper(name[6])=='T'
             && bdeu_CharType::toUpper(name[7])=='H')
            {
                return &ATTRIBUTE_INFO_ARRAY[ATTRIBUTE_INDEX_MAX_DEPTH];
            }
        } break;
        case 11: {
            if (bdeu_CharType::toUpper(name[0])=='B'
             && bdeu_CharType::toUpper(name[1])=='D'
             && bdeu_CharType::toUpper(name[2])=='E'
             && bdeu_CharType::toUpper(name[3])=='M'
             && bdeu_CharType::toUpper(name[4])=='V'
             && bdeu_CharType::toUpper(name[5])=='E'
             && bdeu_CharType::toUpper(name[6])=='R'
             && bdeu_CharType::toUpper(name[7])=='S'
             && bdeu_CharType::toUpper(name[8])=='I'
             && bdeu_CharType::toUpper(name[9])=='O'
             && bdeu_CharType::toUpper(name[10])=='N')
            {
                return &ATTRIBUTE_INFO_ARRAY[ATTRIBUTE_INDEX_BDEM_VERSION];
            }
        } break;
    }
    return 0;
}

const bdeat_AttributeInfo *bdem_BdemDecoderOptions::lookupAttributeInfo(int id)
{
    switch (id) {
      case ATTRIBUTE_ID_BDEM_VERSION:
        return &ATTRIBUTE_INFO_ARRAY[ATTRIBUTE_INDEX_BDEM_VERSION];
      case ATTRIBUTE_ID_MAX_DEPTH:
        return &ATTRIBUTE_INFO_ARRAY[ATTRIBUTE_INDEX_MAX_DEPTH];
      default:
        return 0;
    }
}

// ACCESSORS

bsl::ostream& bdem_BdemDecoderOptions::print(
    bsl::ostream& stream,
    int           level,
    int           spacesPerLevel) const
{
    if (level < 0) {
        level = -level;
    }
    else {
        bdeu_Print::indent(stream, level, spacesPerLevel);
    }

    int levelPlus1 = level + 1;

    if (0 <= spacesPerLevel) {
        // multiline

        stream << "[\n";

        bdeu_Print::indent(stream, levelPlus1, spacesPerLevel);
        stream << "BdemVersion = ";
        bdeu_PrintMethods::print(stream, d_bdemVersion,
                                 -levelPlus1, spacesPerLevel);

        bdeu_Print::indent(stream, levelPlus1, spacesPerLevel);
        stream << "MaxDepth = ";
        bdeu_PrintMethods::print(stream, d_maxDepth,
                                 -levelPlus1, spacesPerLevel);

        bdeu_Print::indent(stream, level, spacesPerLevel);
        stream << "]\n";
    }
    else {
        // single line

        stream << '[';

        stream << ' ';
        stream << "BdemVersion = ";
        bdeu_PrintMethods::print(stream, d_bdemVersion,
                                 -levelPlus1, spacesPerLevel);

        stream << ' ';
        stream << "MaxDepth = ";
        bdeu_PrintMethods::print(stream, d_maxDepth,
                                 -levelPlus1, spacesPerLevel);

        stream << " ]";
    }

    return stream << bsl::flush;
}

}  // close namespace BloombergLP;

// GENERATED BY BLP_BAS_CODEGEN_2.1.6 Mon May 21 16:02:42 2007
// ----------------------------------------------------------------------------
// NOTICE:
//      Copyright (C) Bloomberg L.P., 2007
//      All Rights Reserved.
//      Property of Bloomberg L.P. (BLP)
//      This software is made available solely pursuant to the
//      terms of a BLP license agreement which governs its use.
// ------------------------------ END-OF-FILE ---------------------------------
