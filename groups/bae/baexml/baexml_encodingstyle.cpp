// baexml_encodingstyle.cpp   -*-C++-*-   GENERATED FILE -- DO NOT EDIT

#include <bdes_ident.h>
BDES_IDENT_RCSID(baexml_encodingstyle_cpp,"$Id$ $CSID$ $CCId$")

#include <baexml_encodingstyle.h>

#include <bdeat_formattingmode.h>
#include <bdeat_valuetypefunctions.h>
#include <bdeu_chartype.h>
#include <bdeu_print.h>
#include <bdeu_printmethods.h>
#include <bdeu_string.h>


#include <bsls_assert.h>

#include <bsl_iomanip.h>
#include <bsl_limits.h>
#include <bsl_ostream.h>

namespace BloombergLP {

                            // --------------------------                      
                            // class baexml_EncodingStyle
                            // --------------------------                      

// CONSTANTS

const char baexml_EncodingStyle::CLASS_NAME[] = "baexml_EncodingStyle";

const bdeat_EnumeratorInfo baexml_EncodingStyle::ENUMERATOR_INFO_ARRAY[] = {
    {
        baexml_EncodingStyle::BAEXML_COMPACT,
        "COMPACT",
        sizeof("COMPACT") - 1,
        ""
    },
    {
        baexml_EncodingStyle::BAEXML_PRETTY,
        "PRETTY",
        sizeof("PRETTY") - 1,
        ""
    }
};

// CLASS METHODS

int baexml_EncodingStyle::fromInt(baexml_EncodingStyle::Value *result, int number)
{
    switch (number) {
      case baexml_EncodingStyle::BAEXML_COMPACT:
      case baexml_EncodingStyle::BAEXML_PRETTY:
        *result = (baexml_EncodingStyle::Value)number;
        return 0;
      default:
        return -1;
    }
}

int baexml_EncodingStyle::fromString(baexml_EncodingStyle::Value *result,
                            const char         *string,
                            int                 stringLength)
{
    
    switch(stringLength) {
        case 6: {
            if ((string[0]|0x20)=='p'
             && (string[1]|0x20)=='r'
             && (string[2]|0x20)=='e'
             && (string[3]|0x20)=='t'
             && (string[4]|0x20)=='t'
             && (string[5]|0x20)=='y')
            {
                *result = baexml_EncodingStyle::BAEXML_PRETTY;
                return 0;
            }
        } break;
        case 7: {
            if ((string[0]|0x20)=='c'
             && (string[1]|0x20)=='o'
             && (string[2]|0x20)=='m'
             && (string[3]|0x20)=='p'
             && (string[4]|0x20)=='a'
             && (string[5]|0x20)=='c'
             && (string[6]|0x20)=='t')
            {
                *result = baexml_EncodingStyle::BAEXML_COMPACT;
                return 0;
            }
        } break;
    }
    
    return -1;
}

const char *baexml_EncodingStyle::toString(baexml_EncodingStyle::Value value)
{
    switch (value) {
      case BAEXML_COMPACT: {
        return "COMPACT";
      } break;
      case BAEXML_PRETTY: {
        return "PRETTY";
      } break;
    }

    BSLS_ASSERT(!"invalid enumerator");
    return 0;
}

}  // close namespace BloombergLP

// GENERATED BY BLP_BAS_CODEGEN_3.6.1 Mon Jan  3 12:39:26 2011
// ----------------------------------------------------------------------------
// NOTICE:
//      Copyright (C) Bloomberg L.P., 2011
//      All Rights Reserved.
//      Property of Bloomberg L.P. (BLP)
//      This software is made available solely pursuant to the
//      terms of a BLP license agreement which governs its use.
// ------------------------------ END-OF-FILE ---------------------------------
