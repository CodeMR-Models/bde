// baexml_base64parser.h                  -*-C++-*-
#ifndef INCLUDED_BAEXML_BASE64PARSER
#define INCLUDED_BAEXML_BASE64PARSER

#ifndef INCLUDED_BDES_IDENT
#include <bdes_ident.h>
#endif
BDES_IDENT("$Id: $")

//@PURPOSE: Provide push parser for Base64 types.
//
//@DEPRECATED: Use bdede_base64decoder instead.
//
//@CLASSES: baexml_Base64Parser: push parser for Base64 types.
//
//@SEE_ALSO:
//
//@AUTHOR: Shezan Baig (sbaig)
//
//@CONTACT: Rohan Bhindwale (rbhindwa)
//
//@DESCRIPTION: The 'baexml_Base64Parser<TYPE>' class template provided by this
// component can be used to parse Base64 characters into one of the supported
// Base64 types, which are 'bsl::vector<char>' and 'bsl::string'.  The 'TYPE'
// parameter can be one of these two types.
//
// This class template is a model of the 'PushParser' concept, which contains
// the following methods:
//..
//  int beginParse(TYPE *object);
//      // Prepare the parser to start parsing a new value and associate the
//      // specified 'object' with the parser.  Return 0 if successful and
//      // non-zero otherwise.
//
//  int endParse();
//      // Ends the parse operation and store the value parsed from the pushed
//      // characters into the associated object.  Return 0 if successful and
//      // non-zero otherwise.  The behavior is undefined unless an object is
//      // associated with this parser.  Upon successful completion, the parser
//      // will be disassociated with the object.
//
//  template <typename INPUT_ITERATOR>
//  int pushCharacters(INPUT_ITERATOR begin, INPUT_ITERATOR end);
//      // Push the characters ranging from the specified 'begin' up to (but
//      // not including) the specified 'end' into this parser.  Return 0 if
//      // successful and non-zero otherwise.  The parameterized
//      // 'INPUT_ITERATOR' must be dereferenceable to a 'char' value.  The
//      // behavior is undefined unless an object is associated with this
//      // parser.
//..
//
///Usage
///-----
// The following snippets of code illustrate the usage of this component.
// Suppose you had an input stream that contained Base64 data.  The following
// 'loadFromBase64Stream' function loads this data into an 'bsl::vector<char>'
// blob:
//..
//  #include <baexml_base64parser.h>
//
//  #include <istream>
//  #include <iterator>
//  #include <vector>
//
//  using namespace BloombergLP;
//
//  int loadFromBase64Stream(bsl::vector<char> *result, bsl::istream& stream)
//  {
//      enum { FAILURE = -1 };
//
//      baexml_Base64Parser<bsl::vector<char> > parser;
//
//      if (0 != parser.beginParse(result)) {
//          return FAILURE;
//      }
//
//      if (0 != parser.pushCharacters(bsl::istreambuf_iterator<char>(stream),
//                                     bsl::istreambuf_iterator<char>())) {
//          return FAILURE;
//      }
//
//      return parser.endParse();
//  }
//..
// The following function demonstrates the 'loadFromBase64Stream' function:
//..
//  #include <sstream>
//
//  void usageExample()
//  {
//      const char INPUT[] = "YWJjZA==";  // "abcd" in Base64
//
//      bsl::vector<char>  vec;
//      bsl::istringstream iss(INPUT);
//
//      int result = loadFromBase64Stream(&vec, iss);
//
//      assert(0   == result);
//      assert(4   == vec.size());
//      assert('a' == vec[0]);
//      assert('b' == vec[1]);
//      assert('c' == vec[2]);
//      assert('d' == vec[3]);
//  }
//..

#ifndef INCLUDED_BAESCM_VERSION
#include <baescm_version.h>
#endif

#ifndef INCLUDED_BDEDE_BASE64DECODER
#include <bdede_base64decoder.h>
#endif

#ifndef INCLUDED_BDEAT_VALUETYPEFUNCTIONS
#include <bdeat_valuetypefunctions.h>
#endif

#ifndef INCLUDED_BSL_ITERATOR
#include <bsl_iterator.h>
#endif

#ifndef INCLUDED_BSLS_ASSERT
#include <bsls_assert.h>
#endif

namespace BloombergLP {

                          // ===============================
                          // class baexml_Base64Parser<TYPE>
                          // ===============================

template <typename TYPE>
class baexml_Base64Parser {
    // This is a push parser for supported Base64 types ('bsl::vector<char>' or
    // 'bsl::string').

    // PRIVATE DATA MEMBERS
    bdede_Base64Decoder  d_base64Decoder;   // decoder
    TYPE                *d_object_p;        // associated object

  private:
    // NOT IMPLEMENTED
    baexml_Base64Parser(const baexml_Base64Parser&);
    baexml_Base64Parser& operator=(const baexml_Base64Parser&);

  public:
    // CREATORS
    baexml_Base64Parser();
        // Create a parser for parsing Base64 types.

#ifdef DOXYGEN    // Generated by compiler:

    ~baexml_Base64Parser();
        // Destroy this parser object.
#endif

    // MANIPULATORS
    int beginParse(TYPE *object);
        // Prepare the parser to start parsing a new value and associate the
        // specified 'object' with the parser.  Return 0 if successful and
        // non-zero otherwise.

    int endParse();
        // Ends the parse operation and store the value parsed from the pushed
        // characters into the associated object.  Return 0 if successful and
        // non-zero otherwise.  The behavior is undefined unless an object is
        // associated with this parser.  Upon successful completion, the parser
        // will be disassociated with the object.

    template <typename INPUT_ITERATOR>
    int pushCharacters(INPUT_ITERATOR begin, INPUT_ITERATOR end);
        // Push the characters ranging from the specified 'begin' up to (but
        // not including) the specified 'end' into this parser.  Return 0 if
        // successful and non-zero otherwise.  The parameterized
        // 'INPUT_ITERATOR' must be dereferenceable to a 'char' value.  The
        // behavior is undefined unless an object is associated with this
        // parser.
};

// ============================================================================
//                        INLINE FUNCTION DEFINITIONS
// ============================================================================

                          // -------------------------------
                          // class baexml_Base64Parser<TYPE>
                          // -------------------------------

// CREATORS

template <typename TYPE>
baexml_Base64Parser<TYPE>::baexml_Base64Parser()
: d_base64Decoder(true)  // 'true' indicates report errors
, d_object_p(0)
{
}

// MANIPULATORS

template <typename TYPE>
int baexml_Base64Parser<TYPE>::beginParse(TYPE *object)
{
    BSLS_ASSERT_SAFE(object);

    enum { BAEXML_SUCCESS = 0 };

    d_base64Decoder.resetState();
    d_object_p = object;

    bdeat_ValueTypeFunctions::reset(d_object_p);

    return BAEXML_SUCCESS;
}

template <typename TYPE>
int baexml_Base64Parser<TYPE>::endParse()
{
    BSLS_ASSERT_SAFE(d_object_p);

    enum { BAEXML_SUCCESS = 0, BAEXML_FAILURE = -1 };

    bsl::back_insert_iterator<TYPE> outputIterator(*d_object_p);

    int status = d_base64Decoder.endConvert(outputIterator);

    if (0 > status) {
        return BAEXML_FAILURE;
    }

    BSLS_ASSERT_SAFE(0 == status);  // nothing should be retained by decoder

    d_object_p = 0;

    return BAEXML_SUCCESS;
}

template <typename TYPE>
template <typename INPUT_ITERATOR>
int baexml_Base64Parser<TYPE>::pushCharacters(INPUT_ITERATOR begin,
                                              INPUT_ITERATOR end)
{
    BSLS_ASSERT_SAFE(d_object_p);

    enum { BAEXML_SUCCESS = 0, BAEXML_FAILURE = -1 };

    bsl::back_insert_iterator<TYPE> outputIterator(*d_object_p);

    int status = d_base64Decoder.convert(outputIterator, begin, end);

    if (0 > status) {
        return BAEXML_FAILURE;
    }

    BSLS_ASSERT_SAFE(0 == status);  // nothing should be retained by decoder

    return BAEXML_SUCCESS;
}

}  // close namespace BloombergLP

#endif // ! defined(INCLUDED_BAEXML_BASE64PARSER)

// ---------------------------------------------------------------------------
// NOTICE:
//      Copyright (C) Bloomberg L.P., 2005
//      All Rights Reserved.
//      Property of Bloomberg L.P. (BLP)
//      This software is made available solely pursuant to the
//      terms of a BLP license agreement which governs its use.
// ----------------------------- END-OF-FILE ---------------------------------
