///STACKTRACE USAGE
///----------------
// The following code snippets illustrate the simplest way to obtain a stack
// trace.
//
// First we define a recursive function 'recurseAndPrintStack':
//..
//  static
//  void recurseAndPrintStack(int *depth)
//      // Recurse to the specified 'depth', then print out the stack trace to
//      // 'cout'.
//  {
//      if (--*depth > 0) {
//          recurseAndPrintStack(depth);
//      }
//      else {
//..
// Now we invoke the function 'printStackTrace' to print out a stack trace.  In
// this case, the 'maxFrames' argument is unspecified, and defaults to at least
// 1024 (which is more than we need) and the 'demanglingPreferredFlag' argument
// is unspecified, and defaults to 'true'.
//..
//          baesu_StackTracePrintUtil::printStackTrace(cout);
//      }
//
//      ++*depth;   // Prevent compiler from optimizing tail recursion as a
//                  // loop.
//  }
//
//  int main()
//  {
//      int depth = 5;
//      recurseAndPrintUsage(&depth);
//      assert(5 == depth);
//  }
//..
// Finally, invoking the program in this example, on AIX, produces the
// following output.  Output for each frame is single line.  Note that the
// lines were longer than 80 chars, so continuation is wrapped, and that the
// program name is truncated to 32 characters.
//..
//  (0): BloombergLP::baesu_StackTracePrintUtil::.printStackTrace(
//                 std::basic_ostream<char,std::char_traits<char> >&,
//                 int,bool)+0x140 at 0x10009d68
//                 source:baesu_stacktraceprintutil.cpp:51 in
//                 baesu_stacktraceprintutil.t.dbg_
//  (1): .recurseAndPrintExample1(int*)+0x58 at 0x10009be8
//                 source:baesu_stacktraceprintutil.t.cpp:630 in
//                 baesu_stacktraceprintutil.t.dbg_
//  (2): .recurseAndPrintExample1(int*)+0x40 at 0x10009bd0
//                 source:baesu_stacktraceprintutil.t.cpp:623 in
//                 baesu_stacktraceprintutil.t.dbg_
//  (3): .recurseAndPrintExample1(int*)+0x40 at 0x10009bd0
//                 source:baesu_stacktraceprintutil.t.cpp:623 in
//                 baesu_stacktraceprintutil.t.dbg_
//  (4): .recurseAndPrintExample1(int*)+0x40 at 0x10009bd0
//                 source:baesu_stacktraceprintutil.t.cpp:623 in
//                 baesu_stacktraceprintutil.t.dbg_
//  (5): .recurseAndPrintExample1(int*)+0x40 at 0x10009bd0
//                 source:baesu_stacktraceprintutil.t.cpp:623 in
//                 baesu_stacktraceprintutil.t.dbg_
//  (6): .main+0x2d4 at 0x10000a2c
//                 source:baesu_stacktraceprintutil.t.cpp:687 in
//                 baesu_stacktraceprintutil.t.dbg_
//  (7): .__start+0x6c at 0x1000020c
//                 source:crt0main.s in
//                 baesu_stacktraceprintutil.t.dbg_
//..
