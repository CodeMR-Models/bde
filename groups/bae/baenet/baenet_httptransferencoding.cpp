// baenet_httptransferencoding.cpp   -*-C++-*-   GENERATED FILE -- DO NOT EDIT
#include <bdes_ident.h>
BDES_IDENT_RCSID(baenet_httptransferencoding_cpp,"$Id$ $CSID$ $CCId$")
#include <baenet_httptransferencoding.h>

#include <bdeat_formattingmode.h>
#include <bdeat_valuetypefunctions.h>
#include <bdeu_print.h>
#include <bdeu_printmethods.h>
#include <bdeu_string.h>


#include <bsls_assert.h>

#include <bsl_ostream.h>
#include <bsl_iomanip.h>

namespace BloombergLP {

                   // -------------------------------------                    
                   // class baenet_HttpTransferEncoding                    
                   // -------------------------------------                    

// CONSTANTS

const char baenet_HttpTransferEncoding::CLASS_NAME[]
                    = "baenet_HttpTransferEncoding";

const bdeat_EnumeratorInfo
                       baenet_HttpTransferEncoding::ENUMERATOR_INFO_ARRAY[] = {
    {
        baenet_HttpTransferEncoding::BAENET_CHUNKED,
        "chunked",
        sizeof("chunked") - 1,
        ""
    },
    {
        baenet_HttpTransferEncoding::BAENET_IDENTITY,
        "identity",
        sizeof("identity") - 1,
        ""
    }
};

// CLASS METHODS

int baenet_HttpTransferEncoding::fromInt(baenet_HttpTransferEncoding::Value *result, int number)
{
    switch (number) {
      case baenet_HttpTransferEncoding::BAENET_CHUNKED:
      case baenet_HttpTransferEncoding::BAENET_IDENTITY:
        *result = (baenet_HttpTransferEncoding::Value)number;
        return 0;
      default:
        return -1;
    }
}

int baenet_HttpTransferEncoding::fromString(
                            baenet_HttpTransferEncoding::Value *result,
                            const char                         *string,
                            int                                 stringLength)
{

    switch(stringLength) {
        case 7: {
            if ((string[0]|0x20)=='c'
             && (string[1]|0x20)=='h'
             && (string[2]|0x20)=='u'
             && (string[3]|0x20)=='n'
             && (string[4]|0x20)=='k'
             && (string[5]|0x20)=='e'
             && (string[6]|0x20)=='d')
            {
                *result = baenet_HttpTransferEncoding::BAENET_CHUNKED;
                return 0;
            }
        } break;
        case 8: {
            if ((string[0]|0x20)=='i'
             && (string[1]|0x20)=='d'
             && (string[2]|0x20)=='e'
             && (string[3]|0x20)=='n'
             && (string[4]|0x20)=='t'
             && (string[5]|0x20)=='i'
             && (string[6]|0x20)=='t'
             && (string[7]|0x20)=='y')
            {
                *result = baenet_HttpTransferEncoding::BAENET_IDENTITY;
                return 0;
            }
        } break;
    }

    return -1;
}

const char *baenet_HttpTransferEncoding::toString(baenet_HttpTransferEncoding::Value value)
{
    switch (value) {
      case BAENET_CHUNKED: {
        return "chunked";
      } break;
      case BAENET_IDENTITY: {
        return "identity";
      } break;
    }

    BSLS_ASSERT(!"invalid enumerator");
    return 0;
}

}  // close namespace BloombergLP

// GENERATED BY BLP_BAS_CODEGEN_3.4.4 Thu Feb 11 12:17:12 2010
// ----------------------------------------------------------------------------
// NOTICE:
//      Copyright (C) Bloomberg L.P., 2010
//      All Rights Reserved.
//      Property of Bloomberg L.P. (BLP)
//      This software is made available solely pursuant to the
//      terms of a BLP license agreement which governs its use.
// ------------------------------ END-OF-FILE ---------------------------------
