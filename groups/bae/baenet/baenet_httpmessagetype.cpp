// baenet_httpmessagetype.cpp   -*-C++-*-   GENERATED FILE -- DO NOT EDIT
#include <bdes_ident.h>
BDES_IDENT_RCSID(baenet_httpmessagetype_cpp,"$Id$ $CSID$ $CCId$")
#include <baenet_httpmessagetype.h>

#include <bdeat_formattingmode.h>
#include <bdeat_valuetypefunctions.h>
#include <bdeu_print.h>
#include <bdeu_printmethods.h>
#include <bdeu_string.h>


#include <bsls_assert.h>

#include <bsl_ostream.h>
#include <bsl_iomanip.h>

namespace BloombergLP {

                      // --------------------------------                      
                      // class baenet_HttpMessageType                      
                      // --------------------------------                      

// CONSTANTS

const char baenet_HttpMessageType::CLASS_NAME[] = "baenet_HttpMessageType";

const bdeat_EnumeratorInfo baenet_HttpMessageType::ENUMERATOR_INFO_ARRAY[] = {
    {
        baenet_HttpMessageType::BAENET_REQUEST,
        "Request",
        sizeof("Request") - 1,
        ""
    },
    {
        baenet_HttpMessageType::BAENET_RESPONSE,
        "Response",
        sizeof("Response") - 1,
        ""
    }
};

// CLASS METHODS

int baenet_HttpMessageType::fromInt(baenet_HttpMessageType::Value *result, int number)
{
    switch (number) {
      case baenet_HttpMessageType::BAENET_REQUEST:
      case baenet_HttpMessageType::BAENET_RESPONSE:
        *result = (baenet_HttpMessageType::Value)number;
        return 0;
      default:
        return -1;
    }
}

int baenet_HttpMessageType::fromString(baenet_HttpMessageType::Value *result,
                            const char         *string,
                            int                 stringLength)
{
    switch(stringLength) {
        case 7: {
            if ((string[0]|0x20)=='r'
             && (string[1]|0x20)=='e'
             && (string[2]|0x20)=='q'
             && (string[3]|0x20)=='u'
             && (string[4]|0x20)=='e'
             && (string[5]|0x20)=='s'
             && (string[6]|0x20)=='t')
            {
                *result = baenet_HttpMessageType::BAENET_REQUEST;
                return 0;
            }
        } break;
        case 8: {
            if ((string[0]|0x20)=='r'
             && (string[1]|0x20)=='e'
             && (string[2]|0x20)=='s'
             && (string[3]|0x20)=='p'
             && (string[4]|0x20)=='o'
             && (string[5]|0x20)=='n'
             && (string[6]|0x20)=='s'
             && (string[7]|0x20)=='e')
            {
                *result = baenet_HttpMessageType::BAENET_RESPONSE;
                return 0;
            }
        } break;
    }
    
    return -1;
}

const char *baenet_HttpMessageType::toString(baenet_HttpMessageType::Value value)
{
    switch (value) {
      case BAENET_REQUEST: {
        return "Request";
      } break;
      case BAENET_RESPONSE: {
        return "Response";
      } break;
    }

    BSLS_ASSERT(!"invalid enumerator");
    return 0;
}

}  // close namespace BloombergLP

// GENERATED BY BLP_BAS_CODEGEN_3.4.4 Thu Feb 11 12:17:12 2010
// ----------------------------------------------------------------------------
// NOTICE:
//      Copyright (C) Bloomberg L.P., 2010
//      All Rights Reserved.
//      Property of Bloomberg L.P. (BLP)
//      This software is made available solely pursuant to the
//      terms of a BLP license agreement which governs its use.
// ------------------------------ END-OF-FILE ---------------------------------
