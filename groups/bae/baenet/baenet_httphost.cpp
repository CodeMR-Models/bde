// baenet_httphost.cpp   -*-C++-*-   GENERATED FILE -- DO NOT EDIT
#include <bdes_ident.h>
BDES_IDENT_RCSID(baenet_httphost_cpp,"$Id$ $CSID$ $CCId$")
#include <baenet_httphost.h>

#include <bdeat_formattingmode.h>
#include <bdeat_valuetypefunctions.h>
#include <bdeu_chartype.h>
#include <bdeu_print.h>
#include <bdeu_printmethods.h>
#include <bdeu_string.h>

#include <bdeut_nullablevalue.h>
#include <bsl_string.h>

#include <bsls_assert.h>

#include <bsl_ostream.h>
#include <bsl_iomanip.h>

namespace BloombergLP {

                         // -------------------------                          
                         // class baenet_HttpHost                          
                         // -------------------------                          

// CONSTANTS

const char baenet_HttpHost::CLASS_NAME[] = "baenet_HttpHost";
const bdeat_AttributeInfo baenet_HttpHost::ATTRIBUTE_INFO_ARRAY[] = {
    {
        ATTRIBUTE_ID_NAME,
        "Name",
        sizeof("Name") - 1,
        "",
        bdeat_FormattingMode::BDEAT_TEXT
    },
    {
        ATTRIBUTE_ID_PORT,
        "Port",
        sizeof("Port") - 1,
        "",
        bdeat_FormattingMode::BDEAT_DEC
    }
};

// CLASS METHODS

const bdeat_AttributeInfo *baenet_HttpHost::lookupAttributeInfo(
        const char *name,
        int         nameLength)
{
    switch(nameLength) {
        case 4: {
            switch(bdeu_CharType::toUpper(name[0])) {
                case 'N': {
                    if ((name[1]|0x20)=='a'
                     && (name[2]|0x20)=='m'
                     && (name[3]|0x20)=='e')
                    {
                        return &ATTRIBUTE_INFO_ARRAY[ATTRIBUTE_INDEX_NAME];
                    }
                } break;
                case 'P': {
                    if ((name[1]|0x20)=='o'
                     && (name[2]|0x20)=='r'
                     && (name[3]|0x20)=='t')
                    {
                        return &ATTRIBUTE_INFO_ARRAY[ATTRIBUTE_INDEX_PORT];
                    }
                } break;
            }
        } break;
    }
    return 0;
}

const bdeat_AttributeInfo *baenet_HttpHost::lookupAttributeInfo(int id)
{
    switch (id) {
      case ATTRIBUTE_ID_NAME:
        return &ATTRIBUTE_INFO_ARRAY[ATTRIBUTE_INDEX_NAME];
      case ATTRIBUTE_ID_PORT:
        return &ATTRIBUTE_INFO_ARRAY[ATTRIBUTE_INDEX_PORT];
      default:
        return 0;
    }
}

// CREATORS

baenet_HttpHost::baenet_HttpHost(bslma_Allocator *basicAllocator)
: d_name(basicAllocator)
, d_port()
{
}

baenet_HttpHost::baenet_HttpHost(const baenet_HttpHost& original,
                                         bslma_Allocator *basicAllocator)
: d_name(original.d_name, basicAllocator)
, d_port(original.d_port)
{
}

baenet_HttpHost::~baenet_HttpHost()
{
}

// MANIPULATORS

baenet_HttpHost&
baenet_HttpHost::operator=(const baenet_HttpHost& rhs)
{
    if (this != &rhs) {
        d_name = rhs.d_name;
        d_port = rhs.d_port;
    }
    return *this;
}

void baenet_HttpHost::reset()
{
    bdeat_ValueTypeFunctions::reset(&d_name);
    bdeat_ValueTypeFunctions::reset(&d_port);
}

// ACCESSORS

bsl::ostream& baenet_HttpHost::print(
    bsl::ostream& stream,
    int           level,
    int           spacesPerLevel) const
{
    if (level < 0) {
        level = -level;
    }
    else {
        bdeu_Print::indent(stream, level, spacesPerLevel);
    }

    int levelPlus1 = level + 1;

    if (0 <= spacesPerLevel) {
        // multiline

        stream << "[\n";

        bdeu_Print::indent(stream, levelPlus1, spacesPerLevel);
        stream << "Name = ";
        bdeu_PrintMethods::print(stream, d_name,
                                 -levelPlus1, spacesPerLevel);

        bdeu_Print::indent(stream, levelPlus1, spacesPerLevel);
        stream << "Port = ";
        bdeu_PrintMethods::print(stream, d_port,
                                 -levelPlus1, spacesPerLevel);

        bdeu_Print::indent(stream, level, spacesPerLevel);
        stream << "]\n";
    }
    else {
        // single line

        stream << '[';

        stream << ' ';
        stream << "Name = ";
        bdeu_PrintMethods::print(stream, d_name,
                                 -levelPlus1, spacesPerLevel);

        stream << ' ';
        stream << "Port = ";
        bdeu_PrintMethods::print(stream, d_port,
                                 -levelPlus1, spacesPerLevel);

        stream << " ]";
    }

    return stream << bsl::flush;
}

}  // close namespace BloombergLP

// GENERATED BY BLP_BAS_CODEGEN_3.4.4 Wed Feb 10 17:14:02 2010
// ----------------------------------------------------------------------------
// NOTICE:
//      Copyright (C) Bloomberg L.P., 2010
//      All Rights Reserved.
//      Property of Bloomberg L.P. (BLP)
//      This software is made available solely pursuant to the
//      terms of a BLP license agreement which governs its use.
// ------------------------------ END-OF-FILE ---------------------------------
