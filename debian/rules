#!/usr/bin/make -f
# -*- makefile -*-

MAKE_JOBS:=4
TMPDIR:=/tmp
SHELL:=/bin/bash

RSSUITE_TOOLS:=$(DISTRIBUTION_REFROOT)/bbsrc/rssuite-tools
RSSUITE:=$(shell cat $(RSSUITE_TOOLS)/RSSUITE.version)
include $(RSSUITE_TOOLS)/rssuite-vars.mk

BDE_TOOLS_ETC:=$(DISTRIBUTION_REFROOT)/$(PREFIX)/etc/bde-tools
include $(BDE_TOOLS_ETC)/debian-rules-uplid
include $(BDE_TOOLS_ETC)/debian-rules-flavors

BDE_OSS_TOOLS_ETC:=$(DISTRIBUTION_REFROOT)/$(PREFIX)/etc/bde-oss-tools

BDE_TOOLS_LIBEXEC:=$(DISTRIBUTION_REFROOT)/$(PREFIX)/libexec/bde-tools
BDE_OSS_TOOLS_LIBEXEC:=$(DISTRIBUTION_REFROOT)/$(PREFIX)/libexec/bde-oss-tools

PATH:=$(BDE_OSS_TOOLS_LIBEXEC):$(BDE_TOOLS_LIBEXEC):$(PREFIX)/bin:/opt/swt/bin:/usr/bin:/bin:/usr/ccs/bin:$(PATH)

BDE_SETWAFENV=$(BDE_TOOLS_LIBEXEC)/bde_setwafenv.py
WAF=$(BDE_OSS_TOOLS_LIBEXEC)/waf

GROUPS_RSSUITE:=bsl
GROUPS_STATIC_ONLY:=bdl

GROUPS_STATIC:=$(GROUPS_RSSUITE) $(GROUPS_STATIC_ONLY)
GROUPS_DYNAMIC:=$(GROUPS_RSSUITE)
GROUPS:=$(GROUPS_RSSUITE) $(GROUPS_STATIC_ONLY)

comma:= ,
empty:=
space:= $(empty) $(empty)
join-with = $(subst $(space),$1,$(strip $2))
lc = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$1))))))))))))))))))))))))))
uplid:=$(call lc,$(UPLID))

# ============================================================================
# build targets
# ============================================================================

.PHONY: config-control
config-control:
	cat debian/control.in | perl -pi -e 's/\$$\{shlib\:RSSUITE\}/$(RSSUITE)/g' > debian/control

.PHONY: clean
clean: config-control
	rm -rf debian/libbsl-dev debian/libbsl-rs debian/bsl-internal-bdemeta/groups/bsl
	rm -rf unix-*
	rm -rf .lock-waf-*
	rm -rf etc

etc/default.opts:
	mkdir -p etc
	cp $(BDE_OSS_TOOLS_ETC)/default.opts etc/
	cp $(BDE_TOOLS_ETC)/default_internal.opts etc/
	sed /BDE_REFROOT/d etc/default_internal.opts > etc/default_internal.opts.1
	mv etc/default_internal.opts.1 etc/default_internal.opts

define flavor-template-dynamic-32

.PHONY: $(1)-build-dynamic-32
$(1)-build-dynamic-32: etc/default.opts
ifneq ($(GROUPS_DYNAMIC),)
	eval `PATH=$(PATH) HOME=/ BDE_ROOT=. $(BDE_SETWAFENV) -t $(1) --force_uplid $(UPLID)`; \
	PATH=$(PATH) HOME=/ PREFIX=$(DISTRIBUTION_REFROOT)/$(PREFIX) BDE_BSL_SONAME=libbsl_$(RSSUITE).so BDE_ROOT=. $(WAF) configure build --target $(call join-with,$(comma),$(GROUPS_DYNAMIC))
endif

endef


define flavor-template-dynamic-64

.PHONY: $(1)-build-dynamic-64
$(1)-build-dynamic-64: etc/default.opts
ifneq ($(GROUPS_DYNAMIC),)
	eval `PATH=$(PATH) HOME=/ BDE_ROOT=. $(BDE_SETWAFENV) -t $(1) --force_uplid $(UPLID)`; \
	PATH=$(PATH) HOME=/ PREFIX=$(DISTRIBUTION_REFROOT)/$(PREFIX) BDE_BSL_SONAME=libbsl_$(RSSUITE).so BDE_ROOT=. $(WAF) configure build --target $(call join-with,$(comma),$(GROUPS_DYNAMIC))
endif

endef


define flavor-template-static-32

.PHONY: $(1)-build-static-32
$(1)-build-static-32: etc/default.opts
ifneq ($(GROUPS_STATIC),)
	eval `PATH=$(PATH) HOME=/ BDE_ROOT=. $(BDE_SETWAFENV) -t $(1) --force_uplid $(UPLID)`;	\
	PATH=$(PATH) HOME=/ PREFIX=$(DISTRIBUTION_REFROOT)/$(PREFIX) BDE_ROOT=. PC_EXTRA_INCLUDE_DIRS=$(DISTRIBUTION_REFROOT)/$(PREFIX)/include/stlport $(WAF) configure build --lib-suffix .$(1) --install-flat-include --target $(call join-with,$(comma),$(GROUPS_STATIC))
endif

endef


define flavor-template-static-64

.PHONY: $(1)-build-static-64
$(1)-build-static-64: etc/default.opts
ifneq ($(GROUPS_STATIC),)
	eval `PATH=$(PATH) HOME=/ BDE_ROOT=. $(BDE_SETWAFENV) -t $(1) --force_uplid $(UPLID)`;	\
	PATH=$(PATH) HOME=/ PREFIX=$(DISTRIBUTION_REFROOT)/$(PREFIX) BDE_ROOT=. PC_EXTRA_INCLUDE_DIRS=$(DISTRIBUTION_REFROOT)/$(PREFIX)/include/stlport $(WAF) configure build --lib-suffix .$(1) --install-flat-include --install-lib-dir lib64 --target $(call join-with,$(comma),$(GROUPS_STATIC))
endif

endef


$(foreach flavor,$(DYNAMIC_FLAVOR_32bit),$(eval $(call flavor-template-dynamic-32,$(flavor))))
$(foreach flavor,$(DYNAMIC_FLAVOR_64bit),$(eval $(call flavor-template-dynamic-64,$(flavor))))
$(foreach flavor,$(STATIC_FLAVORS_32bit),$(eval $(call flavor-template-static-32,$(flavor))))
$(foreach flavor,$(STATIC_FLAVORS_64bit),$(eval $(call flavor-template-static-64,$(flavor))))

build-libs: $(foreach flavor,$(DYNAMIC_FLAVOR_32bit),$(flavor)-build-dynamic-32) $(foreach flavor,$(DYNAMIC_FLAVOR_64bit),$(flavor)-build-dynamic-64) $(foreach flavor,$(STATIC_FLAVORS_32bit),$(flavor)-build-static-32) $(foreach flavor,$(STATIC_FLAVORS_64bit),$(flavor)-build-static-64)

# ============================================================================
# rs binary targets
# ============================================================================

.PHONY: libbsl-rs
libbsl-rs: opt_exc_mt_64_shr-build-dynamic-64 opt_exc_mt_shr-build-dynamic-32
	mkdir -p debian/libbsl-rs/bb/bin/so/RS$(RSSUITE)/
	mkdir -p debian/libbsl-rs/bb/bin/so/64/RS$(RSSUITE)/
	mkdir -p debian/libbsl-rs/DEBIAN
	cp $(uplid)-$(DYNAMIC_FLAVOR_32bit)/groups/bsl/libbsl.so debian/libbsl-rs/bb/bin/so/RS$(RSSUITE)/libbsl_$(RSSUITE).so
	cp $(uplid)-$(DYNAMIC_FLAVOR_64bit)/groups/bsl/libbsl.so debian/libbsl-rs/bb/bin/so/64/RS$(RSSUITE)/libbsl_$(RSSUITE).so


.PHONY: libbsl-rs-binary
libbsl-rs-binary: libbsl-rs
	dpkg-gencontrol -V"shlib:RSSUITE=$(RSSUITE)" -p"libbsl-rs$(RSSUITE)" -Pdebian/libbsl-rs
	dpkg-deb -b debian/libbsl-rs ../

# ============================================================================
# dev binary targets
# ============================================================================

# The _INSTALL_HEADERS rule excludes bdl+inteldfp's subdirectories by name.
# Otherwise, the copy fails on Linux, since the headers in bdl+inteldfp are
# duplicated down in bdl+inteldfp/LIBRARY.  (DRQS 57002187)

PACKAGES_NO_INSTALL:=bsl+stdhdrs
define GROUP_template
GROUP_$(1)_DEPENDS:=$(shell cat groups/$(1)/group/$(1).dep)
GROUP_$(1)_INSTALL_PACKAGES:=$(filter-out $(PACKAGES_NO_INSTALL),$(shell cat groups/$(1)/group/$(1).mem | perl -pi -e 's/\#.*$$//'))
GROUP_$(1)_INSTALL_HEADERS:=$$(foreach package,$$(GROUP_$(1)_INSTALL_PACKAGES),$$(shell find groups/$(1)/$$(package)/ -name '*.h' | grep -v bdl+inteldfp/LIBRARY | grep -v bdl+inteldfp/TESTS))
endef

$(foreach group,$(GROUPS),$(eval $(call GROUP_template,$(group))))

# This was taken from $cstools/build/build_prebuild. Comment in there was:
## the non-conformant bde and bsl directories are not deployed
## normally (perhaps we should just test for '+' instead of listing
## them out?), mostly they're not deployed at all. the only
## exception being stlport (in BDE 2.0+ stdhdrs) which is deployed
## by a special-case top level symlink elsewhere
# We install the compliant package's headers here, and later we have a ifeq
# for bsl to install the stlport headers.
libbsl-dev-additional:
	mkdir -p debian/libbsl-dev/$(PREFIX)/include/stlport
# This is implemented just as a symlink in build_prebuild, but here we won't have
# the source, so we need to copy
	cp -r groups/bsl/bsl+stdhdrs/* debian/libbsl-dev/$(PREFIX)/include/stlport
# Unfortunally, there is going to be more stuff in there than it should, so we're
# just going to purge the excess
	rm -rf debian/libbsl-dev/$(PREFIX)/include/stlport/package/ \
	       debian/libbsl-dev/$(PREFIX)/include/stlport/doc/ \
	       debian/libbsl-dev/$(PREFIX)/include/stlport/test/ \
	       debian/libbsl-dev/$(PREFIX)/include/stlport/$(UPLID)/

define group-dev-template

# default empty rule for packages that don't need override.
lib$(1)-dev-additional:

lib$(1)-dev: lib$(1)-dev-additional $(foreach flavor,$(STATIC_FLAVORS_32bit),$(flavor)-build-static-32) $(foreach flavor,$(STATIC_FLAVORS_64bit),$(flavor)-build-static-64)
	mkdir -p debian/lib$(1)-dev/$(PREFIX)/lib debian/lib$(1)-dev/$(PREFIX)/lib64
	mkdir -p debian/lib$(1)-dev/$(PREFIX)/lib/pkgconfig debian/lib$(1)-dev/$(PREFIX)/lib64/pkgconfig
	mkdir -p debian/lib$(1)-dev/DEBIAN
ifneq ($(STATIC_FLAVORS),)
	$(foreach flavor,$(STATIC_FLAVORS_32bit),cp $(uplid)-$(flavor)/groups/$(1)/lib$(1).$(flavor).a debian/lib$(1)-dev/$(PREFIX)/lib/
	)
	$(foreach flavor,$(STATIC_FLAVORS_32bit),cp $(uplid)-$(flavor)/vc/$(1).$(flavor).pc debian/lib$(1)-dev/$(PREFIX)/lib/pkgconfig/
	)
	$(foreach flavor,$(STATIC_FLAVORS_64bit),cp $(uplid)-$(flavor)/groups/$(1)/lib$(1).$(flavor).a debian/lib$(1)-dev/$(PREFIX)/lib64/
	)
	$(foreach flavor,$(STATIC_FLAVORS_64bit),cp $(uplid)-$(flavor)/vc/$(1).$(flavor).pc debian/lib$(1)-dev/$(PREFIX)/lib64/pkgconfig/
	)
	ln -sf lib$(1).$(DEFAULT_STATIC_FLAVOR_32bit).a debian/lib$(1)-dev/$(PREFIX)/lib/lib$(1).a
	ln -sf lib$(1).$(DEFAULT_STATIC_FLAVOR_64bit).a debian/lib$(1)-dev/$(PREFIX)/lib64/lib$(1).a
	mkdir -p debian/lib$(1)-dev/$(PREFIX)/include
	cp $$(GROUP_$(1)_INSTALL_HEADERS) debian/lib$(1)-dev/$(PREFIX)/include/
endif

lib$(1)-dev-binary: lib$(1)-dev
	dpkg-gencontrol -plib$(1)-dev -V"shlib:RSSUITE=$(RSSUITE)" \
	     -Pdebian/lib$(1)-dev
	dpkg-deb -b debian/lib$(1)-dev ../

endef

$(foreach group,$(GROUPS_STATIC),$(eval $(call group-dev-template,$(group))))

libs-dev: $(foreach group,$(GROUPS_STATIC), lib$(group)-dev-binary)

# ============================================================================
# bde meta target
# ============================================================================

bsl-internal-bdemeta:
	mkdir -p debian/bsl-internal-bdemeta/DEBIAN
	find groups -type d \( -name 'package' -or -name 'group' \) \
	  -exec mkdir -p debian/bsl-internal-bdemeta/$(BLOOMBERG_BDEMETA_ROOT)/{} \; \
	  -exec sh -c "cp "{}"/* debian/bsl-internal-bdemeta/$(BLOOMBERG_BDEMETA_ROOT)/"{}"/" \;
	dpkg-gencontrol -pbsl-internal-bdemeta \
	     -Pdebian/bsl-internal-bdemeta
	dpkg-deb -b debian/bsl-internal-bdemeta ../


##################################
# build is the main build part.
# binary is the governing rule for the packaging
##################################

build: build-arch build-indep

build-indep:

build-arch: build-libs

binary: binary-arch binary-indep

binary-indep:

binary-arch: libbsl-rs-binary libs-dev bsl-internal-bdemeta
